
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  00003320  000033b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bd6  0080031e  0080031e  000034d2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000034d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000473  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc8  00000000  00000000  00003965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fb  00000000  00000000  0000472d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ed  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00005c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_5>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e2       	ldi	r30, 0x20	; 32
      fc:	f3 e3       	ldi	r31, 0x33	; 51
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1e e0       	ldi	r17, 0x0E	; 14
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 3f       	cpi	r26, 0xF4	; 244
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 80 10 	call	0x2100	; 0x2100 <main>
     122:	0c 94 8e 19 	jmp	0x331c	; 0x331c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <left_encoder_pin_config>:

/*! 
 * Function to configure INT4 (PORTE 4) pin as input for the left position encoder
 */
void left_encoder_pin_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     132:	ad e2       	ldi	r26, 0x2D	; 45
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	ed e2       	ldi	r30, 0x2D	; 45
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	8f 7e       	andi	r24, 0xEF	; 239
     13e:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     140:	ae e2       	ldi	r26, 0x2E	; 46
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	ee e2       	ldi	r30, 0x2E	; 46
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 61       	ori	r24, 0x10	; 16
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <right_encoder_pin_config>:

/*!
 * Function to configure INT5 (PORTE 5) pin as input for the right position encoder
 */
void right_encoder_pin_config (void)
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     15c:	ad e2       	ldi	r26, 0x2D	; 45
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ed e2       	ldi	r30, 0x2D	; 45
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8f 7d       	andi	r24, 0xDF	; 223
     168:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     16a:	ae e2       	ldi	r26, 0x2E	; 46
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ee e2       	ldi	r30, 0x2E	; 46
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	80 62       	ori	r24, 0x20	; 32
     176:	8c 93       	st	X, r24
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <left_position_encoder_interrupt_init>:

/*!
 * This function enables interrupt 4
 */
void left_position_encoder_interrupt_init (void)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
 //cli(); //Clears the global interrupt
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     186:	aa e6       	ldi	r26, 0x6A	; 106
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	ea e6       	ldi	r30, 0x6A	; 106
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     194:	ad e3       	ldi	r26, 0x3D	; 61
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	ed e3       	ldi	r30, 0x3D	; 61
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	80 61       	ori	r24, 0x10	; 16
     1a0:	8c 93       	st	X, r24
 //sei();   // Enables the global interrupt 
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <right_position_encoder_interrupt_init>:

/*!
 * This function enables interrupt 5
 */
void right_position_encoder_interrupt_init (void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
 //cli(); //Clears the global interrupt
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     1b0:	aa e6       	ldi	r26, 0x6A	; 106
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	ea e6       	ldi	r30, 0x6A	; 106
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     1be:	ad e3       	ldi	r26, 0x3D	; 61
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	ed e3       	ldi	r30, 0x3D	; 61
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 62       	ori	r24, 0x20	; 32
     1ca:	8c 93       	st	X, r24
 //sei();   // Enables the global interrupt 
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <__vector_6>:

/*! 
 * ISR for right position encoder
 */
ISR(INT5_vect)  
{
     1d2:	1f 92       	push	r1
     1d4:	0f 92       	push	r0
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	0f 92       	push	r0
     1da:	11 24       	eor	r1, r1
     1dc:	8f 93       	push	r24
     1de:	9f 93       	push	r25
     1e0:	af 93       	push	r26
     1e2:	bf 93       	push	r27
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
     1ec:	80 91 22 03 	lds	r24, 0x0322
     1f0:	90 91 23 03 	lds	r25, 0x0323
     1f4:	a0 91 24 03 	lds	r26, 0x0324
     1f8:	b0 91 25 03 	lds	r27, 0x0325
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	a1 1d       	adc	r26, r1
     200:	b1 1d       	adc	r27, r1
     202:	80 93 22 03 	sts	0x0322, r24
     206:	90 93 23 03 	sts	0x0323, r25
     20a:	a0 93 24 03 	sts	0x0324, r26
     20e:	b0 93 25 03 	sts	0x0325, r27
}
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <__vector_5>:

/*!
 * ISR for left position encoder
 */
ISR(INT4_vect)
{
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
     242:	80 91 1e 03 	lds	r24, 0x031E
     246:	90 91 1f 03 	lds	r25, 0x031F
     24a:	a0 91 20 03 	lds	r26, 0x0320
     24e:	b0 91 21 03 	lds	r27, 0x0321
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	a1 1d       	adc	r26, r1
     256:	b1 1d       	adc	r27, r1
     258:	80 93 1e 03 	sts	0x031E, r24
     25c:	90 93 1f 03 	sts	0x031F, r25
     260:	a0 93 20 03 	sts	0x0320, r26
     264:	b0 93 21 03 	sts	0x0321, r27
}
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	0f 90       	pop	r0
     276:	0f be       	out	0x3f, r0	; 63
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	18 95       	reti

0000027e <motion_set>:
 * This function moves the motor in the given direction
 * Direction --> 1 (forward)
 * Direction --> 0 (backward)
 */
void motion_set (unsigned char Direction)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	0f 92       	push	r0
     284:	0f 92       	push	r0
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     28c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
     294:	e2 e2       	ldi	r30, 0x22	; 34
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	80 7f       	andi	r24, 0xF0	; 240
     2a0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	89 2b       	or	r24, r25
     2a8:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
     2aa:	e2 e2       	ldi	r30, 0x22	; 34
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	80 83       	st	Z, r24
}
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <forward>:

void forward (void) /*! both wheels forward */
{
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <back>:

void back (void) /*! both wheels backward */
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     2d8:	89 e0       	ldi	r24, 0x09	; 9
     2da:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	08 95       	ret

000002e4 <left>:

void left (void) /*! Left wheel backward, Right wheel forward */
{
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     2ec:	85 e0       	ldi	r24, 0x05	; 5
     2ee:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <right>:

void right (void) /*! Left wheel forward, Right wheel backward */
{
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     300:	8a e0       	ldi	r24, 0x0A	; 10
     302:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     306:	cf 91       	pop	r28
     308:	df 91       	pop	r29
     30a:	08 95       	ret

0000030c <soft_left>:

void soft_left (void) /*! Left wheel stationary, Right wheel forward */
{
     30c:	df 93       	push	r29
     30e:	cf 93       	push	r28
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     31a:	cf 91       	pop	r28
     31c:	df 91       	pop	r29
     31e:	08 95       	ret

00000320 <soft_right>:

void soft_right (void) /*! Left wheel forward, Right wheel is stationary */
{
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     32e:	cf 91       	pop	r28
     330:	df 91       	pop	r29
     332:	08 95       	ret

00000334 <soft_left_2>:

void soft_left_2 (void) /*! Left wheel backward, right wheel stationary */
{
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	08 95       	ret

00000348 <soft_right_2>:

void soft_right_2 (void) /*! Left wheel stationary, Right wheel backward */
{
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     350:	88 e0       	ldi	r24, 0x08	; 8
     352:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <stop>:

void stop (void)
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 3f 01 	call	0x27e	; 0x27e <motion_set>
}
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	08 95       	ret

00000370 <angle_rotate>:

/*!
 * This function turns the robot by specified degrees
 */
void angle_rotate(unsigned int Degrees)
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	2a 97       	sbiw	r28, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	9a 87       	std	Y+10, r25	; 0x0a
     386:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	8d 83       	std	Y+5, r24	; 0x05
     392:	9e 83       	std	Y+6, r25	; 0x06
     394:	af 83       	std	Y+7, r26	; 0x07
     396:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     398:	19 82       	std	Y+1, r1	; 0x01
     39a:	1a 82       	std	Y+2, r1	; 0x02
     39c:	1b 82       	std	Y+3, r1	; 0x03
     39e:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.450; // division by resolution to get shaft count
     3a0:	89 85       	ldd	r24, Y+9	; 0x09
     3a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a4:	cc 01       	movw	r24, r24
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__floatunsisf>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	4e e8       	ldi	r20, 0x8E	; 142
     3c0:	50 e4       	ldi	r21, 0x40	; 64
     3c2:	0e 94 b6 14 	call	0x296c	; 0x296c <__divsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	8d 83       	std	Y+5, r24	; 0x05
     3cc:	9e 83       	std	Y+6, r25	; 0x06
     3ce:	af 83       	std	Y+7, r26	; 0x07
     3d0:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     3d2:	6d 81       	ldd	r22, Y+5	; 0x05
     3d4:	7e 81       	ldd	r23, Y+6	; 0x06
     3d6:	8f 81       	ldd	r24, Y+7	; 0x07
     3d8:	98 85       	ldd	r25, Y+8	; 0x08
     3da:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	cc 01       	movw	r24, r24
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	ab 83       	std	Y+3, r26	; 0x03
     3ee:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     3f0:	10 92 22 03 	sts	0x0322, r1
     3f4:	10 92 23 03 	sts	0x0323, r1
     3f8:	10 92 24 03 	sts	0x0324, r1
     3fc:	10 92 25 03 	sts	0x0325, r1
 ShaftCountLeft = 0; 
     400:	10 92 1e 03 	sts	0x031E, r1
     404:	10 92 1f 03 	sts	0x031F, r1
     408:	10 92 20 03 	sts	0x0320, r1
     40c:	10 92 21 03 	sts	0x0321, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))	//change
     410:	20 91 22 03 	lds	r18, 0x0322
     414:	30 91 23 03 	lds	r19, 0x0323
     418:	40 91 24 03 	lds	r20, 0x0324
     41c:	50 91 25 03 	lds	r21, 0x0325
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	ab 81       	ldd	r26, Y+3	; 0x03
     426:	bc 81       	ldd	r27, Y+4	; 0x04
     428:	28 17       	cp	r18, r24
     42a:	39 07       	cpc	r19, r25
     42c:	4a 07       	cpc	r20, r26
     42e:	5b 07       	cpc	r21, r27
     430:	88 f4       	brcc	.+34     	; 0x454 <angle_rotate+0xe4>
     432:	20 91 1e 03 	lds	r18, 0x031E
     436:	30 91 1f 03 	lds	r19, 0x031F
     43a:	40 91 20 03 	lds	r20, 0x0320
     43e:	50 91 21 03 	lds	r21, 0x0321
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	ab 81       	ldd	r26, Y+3	; 0x03
     448:	bc 81       	ldd	r27, Y+4	; 0x04
     44a:	28 17       	cp	r18, r24
     44c:	39 07       	cpc	r19, r25
     44e:	4a 07       	cpc	r20, r26
     450:	5b 07       	cpc	r21, r27
     452:	f0 f2       	brcs	.-68     	; 0x410 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop action
     454:	0e 94 ae 01 	call	0x35c	; 0x35c <stop>
}
     458:	2a 96       	adiw	r28, 0x0a	; 10
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <linear_distance_mm>:
 * This function movs the  
 * robot forward by specified distance
 */

void linear_distance_mm(unsigned int DistanceInMM)
{
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	2a 97       	sbiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	9a 87       	std	Y+10, r25	; 0x0a
     480:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	a0 e0       	ldi	r26, 0x00	; 0
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	8d 83       	std	Y+5, r24	; 0x05
     48c:	9e 83       	std	Y+6, r25	; 0x06
     48e:	af 83       	std	Y+7, r26	; 0x07
     490:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     492:	19 82       	std	Y+1, r1	; 0x01
     494:	1a 82       	std	Y+2, r1	; 0x02
     496:	1b 82       	std	Y+3, r1	; 0x03
     498:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     49a:	89 85       	ldd	r24, Y+9	; 0x09
     49c:	9a 85       	ldd	r25, Y+10	; 0x0a
     49e:	cc 01       	movw	r24, r24
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e0       	ldi	r27, 0x00	; 0
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__floatunsisf>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	25 ee       	ldi	r18, 0xE5	; 229
     4b6:	30 ed       	ldi	r19, 0xD0	; 208
     4b8:	4a ea       	ldi	r20, 0xAA	; 170
     4ba:	50 e4       	ldi	r21, 0x40	; 64
     4bc:	0e 94 b6 14 	call	0x296c	; 0x296c <__divsf3>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	8d 83       	std	Y+5, r24	; 0x05
     4c6:	9e 83       	std	Y+6, r25	; 0x06
     4c8:	af 83       	std	Y+7, r26	; 0x07
     4ca:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     4cc:	6d 81       	ldd	r22, Y+5	; 0x05
     4ce:	7e 81       	ldd	r23, Y+6	; 0x06
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	98 85       	ldd	r25, Y+8	; 0x08
     4d4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	89 83       	std	Y+1, r24	; 0x01
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	ab 83       	std	Y+3, r26	; 0x03
     4e2:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
     4e4:	10 92 22 03 	sts	0x0322, r1
     4e8:	10 92 23 03 	sts	0x0323, r1
     4ec:	10 92 24 03 	sts	0x0324, r1
     4f0:	10 92 25 03 	sts	0x0325, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)//also adding count for left count
     4f4:	20 91 22 03 	lds	r18, 0x0322
     4f8:	30 91 23 03 	lds	r19, 0x0323
     4fc:	40 91 24 03 	lds	r20, 0x0324
     500:	50 91 25 03 	lds	r21, 0x0325
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	ab 81       	ldd	r26, Y+3	; 0x03
     50a:	bc 81       	ldd	r27, Y+4	; 0x04
     50c:	82 17       	cp	r24, r18
     50e:	93 07       	cpc	r25, r19
     510:	a4 07       	cpc	r26, r20
     512:	b5 07       	cpc	r27, r21
     514:	78 f7       	brcc	.-34     	; 0x4f4 <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop action
     516:	0e 94 ae 01 	call	0x35c	; 0x35c <stop>
}
     51a:	2a 96       	adiw	r28, 0x0a	; 10
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	08 95       	ret

0000052c <forward_mm>:
/*! 
 * This function moves the robot forward 
 * by DistanceInMM millimeters
 */
void forward_mm(unsigned int DistanceInMM)
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	89 83       	std	Y+1, r24	; 0x01
 forward();
     53c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <forward>
 linear_distance_mm(DistanceInMM);
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	0e 94 35 02 	call	0x46a	; 0x46a <linear_distance_mm>
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <back_mm>:
/*! 
 * This function moves the robot backward 
 * by DistanceInMM millimeters
 */
void back_mm(unsigned int DistanceInMM)
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	0f 92       	push	r0
     558:	0f 92       	push	r0
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	89 83       	std	Y+1, r24	; 0x01
 back();
     562:	0e 94 68 01 	call	0x2d0	; 0x2d0 <back>
 linear_distance_mm(DistanceInMM);
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	0e 94 35 02 	call	0x46a	; 0x46a <linear_distance_mm>
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <left_degrees>:
/*! 
 * This function turns the robot to the left
 * by DistanceInMM millimeters
 */
void left_degrees(unsigned int Degrees) 
{
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	0f 92       	push	r0
     57e:	0f 92       	push	r0
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	9a 83       	std	Y+2, r25	; 0x02
     586:	89 83       	std	Y+1, r24	; 0x01
// 80 pulses for 360 degrees rotation 4.510 degrees per count
 left(); //Turn left
     588:	0e 94 72 01 	call	0x2e4	; 0x2e4 <left>
 angle_rotate(Degrees);
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <right_degrees>:
/*! 
 * This function turns the robot to the right
 * by DistanceInMM millimeters
 */
void right_degrees(unsigned int Degrees)
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	0f 92       	push	r0
     5a4:	0f 92       	push	r0
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	89 83       	std	Y+1, r24	; 0x01
// 80 pulses for 360 degrees rotation 4.510 degrees per count
 right(); //Turn right
     5ae:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <right>
 angle_rotate(Degrees);
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	08 95       	ret

000005c4 <soft_left_degrees>:
/*! 
 * This function turns the robot to the left
 * softly by DistanceInMM millimeters
 */
void soft_left_degrees(unsigned int Degrees)
{
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	0f 92       	push	r0
     5ca:	0f 92       	push	r0
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	9a 83       	std	Y+2, r25	; 0x02
     5d2:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_left(); //Turn soft left
     5d4:	0e 94 86 01 	call	0x30c	; 0x30c <soft_left>
 Degrees=Degrees*2;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	9a 81       	ldd	r25, Y+2	; 0x02
     5e8:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <soft_right_degrees>:
 * Here it moves the left motor backwards
 * without moving the right motor to acheive
 * the desired movement
 */
void soft_right_degrees(unsigned int Degrees)
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	0f 92       	push	r0
     5fc:	0f 92       	push	r0
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9a 83       	std	Y+2, r25	; 0x02
     604:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_right_2();  //Turn soft right
     606:	0e 94 a4 01 	call	0x348	; 0x348 <soft_right_2>
 Degrees=Degrees*2;
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <soft_left_2_degrees>:
 * softly by DistanceInMM millimeters
 * The difference here is that is moves the right motor
 * forwards without moving the left motor
 */
void soft_left_2_degrees(unsigned int Degrees)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	0f 92       	push	r0
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_left_2(); //Turn reverse soft left
     638:	0e 94 9a 01 	call	0x334	; 0x334 <soft_left_2>
 Degrees=Degrees*2;
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	9a 81       	ldd	r25, Y+2	; 0x02
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	cf 91       	pop	r28
     656:	df 91       	pop	r29
     658:	08 95       	ret

0000065a <soft_right_2_degrees>:
 * softly by DistanceInMM millimeters
 * It acheives this move by moving the left motor
 * forwards without moving the left motor
 */
void soft_right_2_degrees(unsigned int Degrees)
{
     65a:	df 93       	push	r29
     65c:	cf 93       	push	r28
     65e:	0f 92       	push	r0
     660:	0f 92       	push	r0
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_right_2();  //Turn reverse soft right
     66a:	0e 94 a4 01 	call	0x348	; 0x348 <soft_right_2>
 Degrees=Degrees*2;
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	0e 94 b8 01 	call	0x370	; 0x370 <angle_rotate>
}
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <motion_pin_config>:
/*!
 * Initialize the motor ports
 */

void motion_pin_config (void) 
{
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     694:	a1 e2       	ldi	r26, 0x21	; 33
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e1 e2       	ldi	r30, 0x21	; 33
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8f 60       	ori	r24, 0x0F	; 15
     6a0:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     6a2:	a2 e2       	ldi	r26, 0x22	; 34
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e2 e2       	ldi	r30, 0x22	; 34
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 7f       	andi	r24, 0xF0	; 240
     6ae:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   // Setting PL3 and PL4 pins as output for PWM generation 
     6b0:	aa e0       	ldi	r26, 0x0A	; 10
     6b2:	b1 e0       	ldi	r27, 0x01	; 1
     6b4:	ea e0       	ldi	r30, 0x0A	; 10
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	80 81       	ld	r24, Z
     6ba:	88 61       	ori	r24, 0x18	; 24
     6bc:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; // PL3 and PL4 pins are for velocity control using PWM. 
     6be:	ab e0       	ldi	r26, 0x0B	; 11
     6c0:	b1 e0       	ldi	r27, 0x01	; 1
     6c2:	eb e0       	ldi	r30, 0x0B	; 11
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	80 81       	ld	r24, Z
     6c8:	88 61       	ori	r24, 0x18	; 24
     6ca:	8c 93       	st	X, r24
}
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <motion_port_init>:

void motion_port_init()
{
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
     6da:	0e 94 46 03 	call	0x68c	; 0x68c <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
     6de:	0e 94 95 00 	call	0x12a	; 0x12a <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     6e2:	0e 94 aa 00 	call	0x154	; 0x154 <right_encoder_pin_config>
 left_position_encoder_interrupt_init();
     6e6:	0e 94 bf 00 	call	0x17e	; 0x17e <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     6ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <right_position_encoder_interrupt_init>
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <move_straight>:
 * This function moves the robot by dist mm according
 * to the direction, i.e. 1 -> forwards,
 * 0 -> backwards
 */
void move_straight(unsigned int dist,int direction)  //moves the bot in the given direction
{											//1 - forward    0 - backward
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <move_straight+0x6>
     6fa:	0f 92       	push	r0
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	7c 83       	std	Y+4, r23	; 0x04
     706:	6b 83       	std	Y+3, r22	; 0x03
	if(direction == 1)
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	91 05       	cpc	r25, r1
     710:	29 f4       	brne	.+10     	; 0x71c <move_straight+0x28>
	{
		forward_mm(dist);
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
     71a:	04 c0       	rjmp	.+8      	; 0x724 <move_straight+0x30>
	}
	else
	{
		back_mm(dist);
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	0e 94 a9 02 	call	0x552	; 0x552 <back_mm>
	}
	stop();
     724:	0e 94 ae 01 	call	0x35c	; 0x35c <stop>
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	cf 91       	pop	r28
     732:	df 91       	pop	r29
     734:	08 95       	ret

00000736 <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     73e:	a7 e2       	ldi	r26, 0x27	; 39
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e7 e2       	ldi	r30, 0x27	; 39
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	87 6f       	ori	r24, 0xF7	; 247
     74a:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     74c:	a8 e2       	ldi	r26, 0x28	; 40
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	e8 e2       	ldi	r30, 0x28	; 40
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	80 78       	andi	r24, 0x80	; 128
     758:	8c 93       	st	X, r24
}
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	c0 57       	subi	r28, 0x70	; 112
     76e:	d0 40       	sbci	r29, 0x00	; 0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	fe 01       	movw	r30, r28
     77c:	e3 59       	subi	r30, 0x93	; 147
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e8       	ldi	r26, 0x80	; 128
     786:	bf e3       	ldi	r27, 0x3F	; 63
     788:	80 83       	st	Z, r24
     78a:	91 83       	std	Z+1, r25	; 0x01
     78c:	a2 83       	std	Z+2, r26	; 0x02
     78e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     790:	8e 01       	movw	r16, r28
     792:	07 59       	subi	r16, 0x97	; 151
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	fe 01       	movw	r30, r28
     798:	e3 59       	subi	r30, 0x93	; 147
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	60 81       	ld	r22, Z
     79e:	71 81       	ldd	r23, Z+1	; 0x01
     7a0:	82 81       	ldd	r24, Z+2	; 0x02
     7a2:	93 81       	ldd	r25, Z+3	; 0x03
     7a4:	2d ec       	ldi	r18, 0xCD	; 205
     7a6:	3c ec       	ldi	r19, 0xCC	; 204
     7a8:	4c e2       	ldi	r20, 0x2C	; 44
     7aa:	55 e4       	ldi	r21, 0x45	; 69
     7ac:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	f8 01       	movw	r30, r16
     7b6:	80 83       	st	Z, r24
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	a2 83       	std	Z+2, r26	; 0x02
     7bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7be:	fe 01       	movw	r30, r28
     7c0:	e7 59       	subi	r30, 0x97	; 151
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	60 81       	ld	r22, Z
     7c6:	71 81       	ldd	r23, Z+1	; 0x01
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e8       	ldi	r20, 0x80	; 128
     7d2:	5f e3       	ldi	r21, 0x3F	; 63
     7d4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     7d8:	88 23       	and	r24, r24
     7da:	44 f4       	brge	.+16     	; 0x7ec <lcd_set_4bit+0x8c>
		__ticks = 1;
     7dc:	fe 01       	movw	r30, r28
     7de:	e9 59       	subi	r30, 0x99	; 153
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	80 83       	st	Z, r24
     7ea:	64 c0       	rjmp	.+200    	; 0x8b4 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     7ec:	fe 01       	movw	r30, r28
     7ee:	e7 59       	subi	r30, 0x97	; 151
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	60 81       	ld	r22, Z
     7f4:	71 81       	ldd	r23, Z+1	; 0x01
     7f6:	82 81       	ldd	r24, Z+2	; 0x02
     7f8:	93 81       	ldd	r25, Z+3	; 0x03
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	3f ef       	ldi	r19, 0xFF	; 255
     7fe:	4f e7       	ldi	r20, 0x7F	; 127
     800:	57 e4       	ldi	r21, 0x47	; 71
     802:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     806:	18 16       	cp	r1, r24
     808:	0c f0       	brlt	.+2      	; 0x80c <lcd_set_4bit+0xac>
     80a:	43 c0       	rjmp	.+134    	; 0x892 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80c:	fe 01       	movw	r30, r28
     80e:	e3 59       	subi	r30, 0x93	; 147
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	60 81       	ld	r22, Z
     814:	71 81       	ldd	r23, Z+1	; 0x01
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e2       	ldi	r20, 0x20	; 32
     820:	51 e4       	ldi	r21, 0x41	; 65
     822:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	8e 01       	movw	r16, r28
     82c:	09 59       	subi	r16, 0x99	; 153
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	bc 01       	movw	r22, r24
     832:	cd 01       	movw	r24, r26
     834:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	f8 01       	movw	r30, r16
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
     842:	1f c0       	rjmp	.+62     	; 0x882 <lcd_set_4bit+0x122>
     844:	fe 01       	movw	r30, r28
     846:	eb 59       	subi	r30, 0x9B	; 155
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	84 e1       	ldi	r24, 0x14	; 20
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     852:	fe 01       	movw	r30, r28
     854:	eb 59       	subi	r30, 0x9B	; 155
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <lcd_set_4bit+0xfc>
     860:	fe 01       	movw	r30, r28
     862:	eb 59       	subi	r30, 0x9B	; 155
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86a:	de 01       	movw	r26, r28
     86c:	a9 59       	subi	r26, 0x99	; 153
     86e:	bf 4f       	sbci	r27, 0xFF	; 255
     870:	fe 01       	movw	r30, r28
     872:	e9 59       	subi	r30, 0x99	; 153
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	9c 93       	st	X, r25
     880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     882:	fe 01       	movw	r30, r28
     884:	e9 59       	subi	r30, 0x99	; 153
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	d1 f6       	brne	.-76     	; 0x844 <lcd_set_4bit+0xe4>
     890:	27 c0       	rjmp	.+78     	; 0x8e0 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     892:	8e 01       	movw	r16, r28
     894:	09 59       	subi	r16, 0x99	; 153
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	fe 01       	movw	r30, r28
     89a:	e7 59       	subi	r30, 0x97	; 151
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	60 81       	ld	r22, Z
     8a0:	71 81       	ldd	r23, Z+1	; 0x01
     8a2:	82 81       	ldd	r24, Z+2	; 0x02
     8a4:	93 81       	ldd	r25, Z+3	; 0x03
     8a6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	f8 01       	movw	r30, r16
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
     8b4:	de 01       	movw	r26, r28
     8b6:	ad 59       	subi	r26, 0x9D	; 157
     8b8:	bf 4f       	sbci	r27, 0xFF	; 255
     8ba:	fe 01       	movw	r30, r28
     8bc:	e9 59       	subi	r30, 0x99	; 153
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	8d 93       	st	X+, r24
     8c6:	9c 93       	st	X, r25
     8c8:	fe 01       	movw	r30, r28
     8ca:	ed 59       	subi	r30, 0x9D	; 157
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <lcd_set_4bit+0x172>
     8d6:	fe 01       	movw	r30, r28
     8d8:	ed 59       	subi	r30, 0x9D	; 157
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8e0:	a8 e2       	ldi	r26, 0x28	; 40
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e8 e2       	ldi	r30, 0x28	; 40
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8e 7f       	andi	r24, 0xFE	; 254
     8ec:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8ee:	a8 e2       	ldi	r26, 0x28	; 40
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e8 e2       	ldi	r30, 0x28	; 40
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8d 7f       	andi	r24, 0xFD	; 253
     8fa:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     8fc:	e8 e2       	ldi	r30, 0x28	; 40
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 e3       	ldi	r24, 0x30	; 48
     902:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     904:	a8 e2       	ldi	r26, 0x28	; 40
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 e2       	ldi	r30, 0x28	; 40
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	84 60       	ori	r24, 0x04	; 4
     910:	8c 93       	st	X, r24
     912:	fe 01       	movw	r30, r28
     914:	e1 5a       	subi	r30, 0xA1	; 161
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 ea       	ldi	r26, 0xA0	; 160
     91e:	b0 e4       	ldi	r27, 0x40	; 64
     920:	80 83       	st	Z, r24
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	a2 83       	std	Z+2, r26	; 0x02
     926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     928:	8e 01       	movw	r16, r28
     92a:	05 5a       	subi	r16, 0xA5	; 165
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	fe 01       	movw	r30, r28
     930:	e1 5a       	subi	r30, 0xA1	; 161
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	60 81       	ld	r22, Z
     936:	71 81       	ldd	r23, Z+1	; 0x01
     938:	82 81       	ldd	r24, Z+2	; 0x02
     93a:	93 81       	ldd	r25, Z+3	; 0x03
     93c:	2d ec       	ldi	r18, 0xCD	; 205
     93e:	3c ec       	ldi	r19, 0xCC	; 204
     940:	4c e2       	ldi	r20, 0x2C	; 44
     942:	55 e4       	ldi	r21, 0x45	; 69
     944:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	f8 01       	movw	r30, r16
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     956:	fe 01       	movw	r30, r28
     958:	e5 5a       	subi	r30, 0xA5	; 165
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	60 81       	ld	r22, Z
     95e:	71 81       	ldd	r23, Z+1	; 0x01
     960:	82 81       	ldd	r24, Z+2	; 0x02
     962:	93 81       	ldd	r25, Z+3	; 0x03
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     970:	88 23       	and	r24, r24
     972:	44 f4       	brge	.+16     	; 0x984 <lcd_set_4bit+0x224>
		__ticks = 1;
     974:	fe 01       	movw	r30, r28
     976:	e7 5a       	subi	r30, 0xA7	; 167
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
     982:	64 c0       	rjmp	.+200    	; 0xa4c <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     984:	fe 01       	movw	r30, r28
     986:	e5 5a       	subi	r30, 0xA5	; 165
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	4f e7       	ldi	r20, 0x7F	; 127
     998:	57 e4       	ldi	r21, 0x47	; 71
     99a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     99e:	18 16       	cp	r1, r24
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <lcd_set_4bit+0x244>
     9a2:	43 c0       	rjmp	.+134    	; 0xa2a <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a4:	fe 01       	movw	r30, r28
     9a6:	e1 5a       	subi	r30, 0xA1	; 161
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	60 81       	ld	r22, Z
     9ac:	71 81       	ldd	r23, Z+1	; 0x01
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	93 81       	ldd	r25, Z+3	; 0x03
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e2       	ldi	r20, 0x20	; 32
     9b8:	51 e4       	ldi	r21, 0x41	; 65
     9ba:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	8e 01       	movw	r16, r28
     9c4:	07 5a       	subi	r16, 0xA7	; 167
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	f8 01       	movw	r30, r16
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	80 83       	st	Z, r24
     9da:	1f c0       	rjmp	.+62     	; 0xa1a <lcd_set_4bit+0x2ba>
     9dc:	fe 01       	movw	r30, r28
     9de:	e9 5a       	subi	r30, 0xA9	; 169
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	84 e1       	ldi	r24, 0x14	; 20
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
     9ea:	fe 01       	movw	r30, r28
     9ec:	e9 5a       	subi	r30, 0xA9	; 169
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <lcd_set_4bit+0x294>
     9f8:	fe 01       	movw	r30, r28
     9fa:	e9 5a       	subi	r30, 0xA9	; 169
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a02:	de 01       	movw	r26, r28
     a04:	a7 5a       	subi	r26, 0xA7	; 167
     a06:	bf 4f       	sbci	r27, 0xFF	; 255
     a08:	fe 01       	movw	r30, r28
     a0a:	e7 5a       	subi	r30, 0xA7	; 167
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	9c 93       	st	X, r25
     a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a1a:	fe 01       	movw	r30, r28
     a1c:	e7 5a       	subi	r30, 0xA7	; 167
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	00 97       	sbiw	r24, 0x00	; 0
     a26:	d1 f6       	brne	.-76     	; 0x9dc <lcd_set_4bit+0x27c>
     a28:	27 c0       	rjmp	.+78     	; 0xa78 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a2a:	8e 01       	movw	r16, r28
     a2c:	07 5a       	subi	r16, 0xA7	; 167
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	fe 01       	movw	r30, r28
     a32:	e5 5a       	subi	r30, 0xA5	; 165
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	60 81       	ld	r22, Z
     a38:	71 81       	ldd	r23, Z+1	; 0x01
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	f8 01       	movw	r30, r16
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	de 01       	movw	r26, r28
     a4e:	ab 5a       	subi	r26, 0xAB	; 171
     a50:	bf 4f       	sbci	r27, 0xFF	; 255
     a52:	fe 01       	movw	r30, r28
     a54:	e7 5a       	subi	r30, 0xA7	; 167
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	8d 93       	st	X+, r24
     a5e:	9c 93       	st	X, r25
     a60:	fe 01       	movw	r30, r28
     a62:	eb 5a       	subi	r30, 0xAB	; 171
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x30a>
     a6e:	fe 01       	movw	r30, r28
     a70:	eb 5a       	subi	r30, 0xAB	; 171
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	91 83       	std	Z+1, r25	; 0x01
     a76:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a78:	a8 e2       	ldi	r26, 0x28	; 40
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e8 e2       	ldi	r30, 0x28	; 40
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8b 7f       	andi	r24, 0xFB	; 251
     a84:	8c 93       	st	X, r24
     a86:	fe 01       	movw	r30, r28
     a88:	ef 5a       	subi	r30, 0xAF	; 175
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e8       	ldi	r26, 0x80	; 128
     a92:	bf e3       	ldi	r27, 0x3F	; 63
     a94:	80 83       	st	Z, r24
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	a2 83       	std	Z+2, r26	; 0x02
     a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a9c:	8e 01       	movw	r16, r28
     a9e:	03 5b       	subi	r16, 0xB3	; 179
     aa0:	1f 4f       	sbci	r17, 0xFF	; 255
     aa2:	fe 01       	movw	r30, r28
     aa4:	ef 5a       	subi	r30, 0xAF	; 175
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	60 81       	ld	r22, Z
     aaa:	71 81       	ldd	r23, Z+1	; 0x01
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	2d ec       	ldi	r18, 0xCD	; 205
     ab2:	3c ec       	ldi	r19, 0xCC	; 204
     ab4:	4c e2       	ldi	r20, 0x2C	; 44
     ab6:	55 e4       	ldi	r21, 0x45	; 69
     ab8:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	f8 01       	movw	r30, r16
     ac2:	80 83       	st	Z, r24
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	a2 83       	std	Z+2, r26	; 0x02
     ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aca:	fe 01       	movw	r30, r28
     acc:	e3 5b       	subi	r30, 0xB3	; 179
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	60 81       	ld	r22, Z
     ad2:	71 81       	ldd	r23, Z+1	; 0x01
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	44 f4       	brge	.+16     	; 0xaf8 <lcd_set_4bit+0x398>
		__ticks = 1;
     ae8:	fe 01       	movw	r30, r28
     aea:	e5 5b       	subi	r30, 0xB5	; 181
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
     af6:	64 c0       	rjmp	.+200    	; 0xbc0 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     af8:	fe 01       	movw	r30, r28
     afa:	e3 5b       	subi	r30, 0xB3	; 179
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f e7       	ldi	r20, 0x7F	; 127
     b0c:	57 e4       	ldi	r21, 0x47	; 71
     b0e:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     b12:	18 16       	cp	r1, r24
     b14:	0c f0       	brlt	.+2      	; 0xb18 <lcd_set_4bit+0x3b8>
     b16:	43 c0       	rjmp	.+134    	; 0xb9e <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b18:	fe 01       	movw	r30, r28
     b1a:	ef 5a       	subi	r30, 0xAF	; 175
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e2       	ldi	r20, 0x20	; 32
     b2c:	51 e4       	ldi	r21, 0x41	; 65
     b2e:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	8e 01       	movw	r16, r28
     b38:	05 5b       	subi	r16, 0xB5	; 181
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	bc 01       	movw	r22, r24
     b3e:	cd 01       	movw	r24, r26
     b40:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     b44:	dc 01       	movw	r26, r24
     b46:	cb 01       	movw	r24, r22
     b48:	f8 01       	movw	r30, r16
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
     b4e:	1f c0       	rjmp	.+62     	; 0xb8e <lcd_set_4bit+0x42e>
     b50:	fe 01       	movw	r30, r28
     b52:	e7 5b       	subi	r30, 0xB7	; 183
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	84 e1       	ldi	r24, 0x14	; 20
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	80 83       	st	Z, r24
     b5e:	fe 01       	movw	r30, r28
     b60:	e7 5b       	subi	r30, 0xB7	; 183
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <lcd_set_4bit+0x408>
     b6c:	fe 01       	movw	r30, r28
     b6e:	e7 5b       	subi	r30, 0xB7	; 183
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b76:	de 01       	movw	r26, r28
     b78:	a5 5b       	subi	r26, 0xB5	; 181
     b7a:	bf 4f       	sbci	r27, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	e5 5b       	subi	r30, 0xB5	; 181
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8e:	fe 01       	movw	r30, r28
     b90:	e5 5b       	subi	r30, 0xB5	; 181
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	d1 f6       	brne	.-76     	; 0xb50 <lcd_set_4bit+0x3f0>
     b9c:	27 c0       	rjmp	.+78     	; 0xbec <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9e:	8e 01       	movw	r16, r28
     ba0:	05 5b       	subi	r16, 0xB5	; 181
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	fe 01       	movw	r30, r28
     ba6:	e3 5b       	subi	r30, 0xB3	; 179
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	60 81       	ld	r22, Z
     bac:	71 81       	ldd	r23, Z+1	; 0x01
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	f8 01       	movw	r30, r16
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
     bc0:	de 01       	movw	r26, r28
     bc2:	a9 5b       	subi	r26, 0xB9	; 185
     bc4:	bf 4f       	sbci	r27, 0xFF	; 255
     bc6:	fe 01       	movw	r30, r28
     bc8:	e5 5b       	subi	r30, 0xB5	; 181
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	8d 93       	st	X+, r24
     bd2:	9c 93       	st	X, r25
     bd4:	fe 01       	movw	r30, r28
     bd6:	e9 5b       	subi	r30, 0xB9	; 185
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 81       	ld	r24, Z
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <lcd_set_4bit+0x47e>
     be2:	fe 01       	movw	r30, r28
     be4:	e9 5b       	subi	r30, 0xB9	; 185
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     bec:	a8 e2       	ldi	r26, 0x28	; 40
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e8 e2       	ldi	r30, 0x28	; 40
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     bfa:	a8 e2       	ldi	r26, 0x28	; 40
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e8 e2       	ldi	r30, 0x28	; 40
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8d 7f       	andi	r24, 0xFD	; 253
     c06:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     c08:	e8 e2       	ldi	r30, 0x28	; 40
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 e3       	ldi	r24, 0x30	; 48
     c0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     c10:	a8 e2       	ldi	r26, 0x28	; 40
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e8 e2       	ldi	r30, 0x28	; 40
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	84 60       	ori	r24, 0x04	; 4
     c1c:	8c 93       	st	X, r24
     c1e:	fe 01       	movw	r30, r28
     c20:	ed 5b       	subi	r30, 0xBD	; 189
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 ea       	ldi	r26, 0xA0	; 160
     c2a:	b0 e4       	ldi	r27, 0x40	; 64
     c2c:	80 83       	st	Z, r24
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	a2 83       	std	Z+2, r26	; 0x02
     c32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c34:	8e 01       	movw	r16, r28
     c36:	01 5c       	subi	r16, 0xC1	; 193
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	fe 01       	movw	r30, r28
     c3c:	ed 5b       	subi	r30, 0xBD	; 189
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	93 81       	ldd	r25, Z+3	; 0x03
     c48:	2d ec       	ldi	r18, 0xCD	; 205
     c4a:	3c ec       	ldi	r19, 0xCC	; 204
     c4c:	4c e2       	ldi	r20, 0x2C	; 44
     c4e:	55 e4       	ldi	r21, 0x45	; 69
     c50:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	f8 01       	movw	r30, r16
     c5a:	80 83       	st	Z, r24
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	a2 83       	std	Z+2, r26	; 0x02
     c60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c62:	fe 01       	movw	r30, r28
     c64:	ff 96       	adiw	r30, 0x3f	; 63
     c66:	60 81       	ld	r22, Z
     c68:	71 81       	ldd	r23, Z+1	; 0x01
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e8       	ldi	r20, 0x80	; 128
     c74:	5f e3       	ldi	r21, 0x3F	; 63
     c76:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     c7a:	88 23       	and	r24, r24
     c7c:	2c f4       	brge	.+10     	; 0xc88 <lcd_set_4bit+0x528>
		__ticks = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9e af       	std	Y+62, r25	; 0x3e
     c84:	8d af       	std	Y+61, r24	; 0x3d
     c86:	46 c0       	rjmp	.+140    	; 0xd14 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     c88:	fe 01       	movw	r30, r28
     c8a:	ff 96       	adiw	r30, 0x3f	; 63
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	82 81       	ldd	r24, Z+2	; 0x02
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	64 f5       	brge	.+88     	; 0xcfc <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca4:	fe 01       	movw	r30, r28
     ca6:	ed 5b       	subi	r30, 0xBD	; 189
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	60 81       	ld	r22, Z
     cac:	71 81       	ldd	r23, Z+1	; 0x01
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	93 81       	ldd	r25, Z+3	; 0x03
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e2       	ldi	r20, 0x20	; 32
     cb8:	51 e4       	ldi	r21, 0x41	; 65
     cba:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	9e af       	std	Y+62, r25	; 0x3e
     cd0:	8d af       	std	Y+61, r24	; 0x3d
     cd2:	0f c0       	rjmp	.+30     	; 0xcf2 <lcd_set_4bit+0x592>
     cd4:	84 e1       	ldi	r24, 0x14	; 20
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	9c af       	std	Y+60, r25	; 0x3c
     cda:	8b af       	std	Y+59, r24	; 0x3b
     cdc:	8b ad       	ldd	r24, Y+59	; 0x3b
     cde:	9c ad       	ldd	r25, Y+60	; 0x3c
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <lcd_set_4bit+0x580>
     ce4:	9c af       	std	Y+60, r25	; 0x3c
     ce6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce8:	8d ad       	ldd	r24, Y+61	; 0x3d
     cea:	9e ad       	ldd	r25, Y+62	; 0x3e
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	9e af       	std	Y+62, r25	; 0x3e
     cf0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
     cf4:	9e ad       	ldd	r25, Y+62	; 0x3e
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	69 f7       	brne	.-38     	; 0xcd4 <lcd_set_4bit+0x574>
     cfa:	16 c0       	rjmp	.+44     	; 0xd28 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfc:	fe 01       	movw	r30, r28
     cfe:	ff 96       	adiw	r30, 0x3f	; 63
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9e af       	std	Y+62, r25	; 0x3e
     d12:	8d af       	std	Y+61, r24	; 0x3d
     d14:	8d ad       	ldd	r24, Y+61	; 0x3d
     d16:	9e ad       	ldd	r25, Y+62	; 0x3e
     d18:	9a af       	std	Y+58, r25	; 0x3a
     d1a:	89 af       	std	Y+57, r24	; 0x39
     d1c:	89 ad       	ldd	r24, Y+57	; 0x39
     d1e:	9a ad       	ldd	r25, Y+58	; 0x3a
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <lcd_set_4bit+0x5c0>
     d24:	9a af       	std	Y+58, r25	; 0x3a
     d26:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d28:	a8 e2       	ldi	r26, 0x28	; 40
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e8 e2       	ldi	r30, 0x28	; 40
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8b 7f       	andi	r24, 0xFB	; 251
     d34:	8c 93       	st	X, r24
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a0 e8       	ldi	r26, 0x80	; 128
     d3c:	bf e3       	ldi	r27, 0x3F	; 63
     d3e:	8d ab       	std	Y+53, r24	; 0x35
     d40:	9e ab       	std	Y+54, r25	; 0x36
     d42:	af ab       	std	Y+55, r26	; 0x37
     d44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d46:	6d a9       	ldd	r22, Y+53	; 0x35
     d48:	7e a9       	ldd	r23, Y+54	; 0x36
     d4a:	8f a9       	ldd	r24, Y+55	; 0x37
     d4c:	98 ad       	ldd	r25, Y+56	; 0x38
     d4e:	2d ec       	ldi	r18, 0xCD	; 205
     d50:	3c ec       	ldi	r19, 0xCC	; 204
     d52:	4c e2       	ldi	r20, 0x2C	; 44
     d54:	55 e4       	ldi	r21, 0x45	; 69
     d56:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	89 ab       	std	Y+49, r24	; 0x31
     d60:	9a ab       	std	Y+50, r25	; 0x32
     d62:	ab ab       	std	Y+51, r26	; 0x33
     d64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d66:	69 a9       	ldd	r22, Y+49	; 0x31
     d68:	7a a9       	ldd	r23, Y+50	; 0x32
     d6a:	8b a9       	ldd	r24, Y+51	; 0x33
     d6c:	9c a9       	ldd	r25, Y+52	; 0x34
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	2c f4       	brge	.+10     	; 0xd88 <lcd_set_4bit+0x628>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	98 ab       	std	Y+48, r25	; 0x30
     d84:	8f a7       	std	Y+47, r24	; 0x2f
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     d88:	69 a9       	ldd	r22, Y+49	; 0x31
     d8a:	7a a9       	ldd	r23, Y+50	; 0x32
     d8c:	8b a9       	ldd	r24, Y+51	; 0x33
     d8e:	9c a9       	ldd	r25, Y+52	; 0x34
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	3f ef       	ldi	r19, 0xFF	; 255
     d94:	4f e7       	ldi	r20, 0x7F	; 127
     d96:	57 e4       	ldi	r21, 0x47	; 71
     d98:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	4c f5       	brge	.+82     	; 0xdf2 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da0:	6d a9       	ldd	r22, Y+53	; 0x35
     da2:	7e a9       	ldd	r23, Y+54	; 0x36
     da4:	8f a9       	ldd	r24, Y+55	; 0x37
     da6:	98 ad       	ldd	r25, Y+56	; 0x38
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e2       	ldi	r20, 0x20	; 32
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	98 ab       	std	Y+48, r25	; 0x30
     dc6:	8f a7       	std	Y+47, r24	; 0x2f
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <lcd_set_4bit+0x688>
     dca:	84 e1       	ldi	r24, 0x14	; 20
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	9e a7       	std	Y+46, r25	; 0x2e
     dd0:	8d a7       	std	Y+45, r24	; 0x2d
     dd2:	8d a5       	ldd	r24, Y+45	; 0x2d
     dd4:	9e a5       	ldd	r25, Y+46	; 0x2e
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <lcd_set_4bit+0x676>
     dda:	9e a7       	std	Y+46, r25	; 0x2e
     ddc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	8f a5       	ldd	r24, Y+47	; 0x2f
     de0:	98 a9       	ldd	r25, Y+48	; 0x30
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dea:	98 a9       	ldd	r25, Y+48	; 0x30
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	69 f7       	brne	.-38     	; 0xdca <lcd_set_4bit+0x66a>
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df2:	69 a9       	ldd	r22, Y+49	; 0x31
     df4:	7a a9       	ldd	r23, Y+50	; 0x32
     df6:	8b a9       	ldd	r24, Y+51	; 0x33
     df8:	9c a9       	ldd	r25, Y+52	; 0x34
     dfa:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	98 ab       	std	Y+48, r25	; 0x30
     e04:	8f a7       	std	Y+47, r24	; 0x2f
     e06:	8f a5       	ldd	r24, Y+47	; 0x2f
     e08:	98 a9       	ldd	r25, Y+48	; 0x30
     e0a:	9c a7       	std	Y+44, r25	; 0x2c
     e0c:	8b a7       	std	Y+43, r24	; 0x2b
     e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e10:	9c a5       	ldd	r25, Y+44	; 0x2c
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <lcd_set_4bit+0x6b2>
     e16:	9c a7       	std	Y+44, r25	; 0x2c
     e18:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     e1a:	a8 e2       	ldi	r26, 0x28	; 40
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e2       	ldi	r30, 0x28	; 40
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     e28:	a8 e2       	ldi	r26, 0x28	; 40
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e2       	ldi	r30, 0x28	; 40
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8d 7f       	andi	r24, 0xFD	; 253
     e34:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     e36:	e8 e2       	ldi	r30, 0x28	; 40
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 e3       	ldi	r24, 0x30	; 48
     e3c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     e3e:	a8 e2       	ldi	r26, 0x28	; 40
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e8 e2       	ldi	r30, 0x28	; 40
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	84 60       	ori	r24, 0x04	; 4
     e4a:	8c 93       	st	X, r24
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 ea       	ldi	r26, 0xA0	; 160
     e52:	b0 e4       	ldi	r27, 0x40	; 64
     e54:	8f a3       	std	Y+39, r24	; 0x27
     e56:	98 a7       	std	Y+40, r25	; 0x28
     e58:	a9 a7       	std	Y+41, r26	; 0x29
     e5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6f a1       	ldd	r22, Y+39	; 0x27
     e5e:	78 a5       	ldd	r23, Y+40	; 0x28
     e60:	89 a5       	ldd	r24, Y+41	; 0x29
     e62:	9a a5       	ldd	r25, Y+42	; 0x2a
     e64:	2d ec       	ldi	r18, 0xCD	; 205
     e66:	3c ec       	ldi	r19, 0xCC	; 204
     e68:	4c e2       	ldi	r20, 0x2C	; 44
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8b a3       	std	Y+35, r24	; 0x23
     e76:	9c a3       	std	Y+36, r25	; 0x24
     e78:	ad a3       	std	Y+37, r26	; 0x25
     e7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e7c:	6b a1       	ldd	r22, Y+35	; 0x23
     e7e:	7c a1       	ldd	r23, Y+36	; 0x24
     e80:	8d a1       	ldd	r24, Y+37	; 0x25
     e82:	9e a1       	ldd	r25, Y+38	; 0x26
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <lcd_set_4bit+0x73e>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9a a3       	std	Y+34, r25	; 0x22
     e9a:	89 a3       	std	Y+33, r24	; 0x21
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     e9e:	6b a1       	ldd	r22, Y+35	; 0x23
     ea0:	7c a1       	ldd	r23, Y+36	; 0x24
     ea2:	8d a1       	ldd	r24, Y+37	; 0x25
     ea4:	9e a1       	ldd	r25, Y+38	; 0x26
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6f a1       	ldd	r22, Y+39	; 0x27
     eb8:	78 a5       	ldd	r23, Y+40	; 0x28
     eba:	89 a5       	ldd	r24, Y+41	; 0x29
     ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9a a3       	std	Y+34, r25	; 0x22
     edc:	89 a3       	std	Y+33, r24	; 0x21
     ede:	0f c0       	rjmp	.+30     	; 0xefe <lcd_set_4bit+0x79e>
     ee0:	84 e1       	ldi	r24, 0x14	; 20
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	98 a3       	std	Y+32, r25	; 0x20
     ee6:	8f 8f       	std	Y+31, r24	; 0x1f
     ee8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eea:	98 a1       	ldd	r25, Y+32	; 0x20
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <lcd_set_4bit+0x78c>
     ef0:	98 a3       	std	Y+32, r25	; 0x20
     ef2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	89 a1       	ldd	r24, Y+33	; 0x21
     ef6:	9a a1       	ldd	r25, Y+34	; 0x22
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9a a3       	std	Y+34, r25	; 0x22
     efc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	89 a1       	ldd	r24, Y+33	; 0x21
     f00:	9a a1       	ldd	r25, Y+34	; 0x22
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <lcd_set_4bit+0x780>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6b a1       	ldd	r22, Y+35	; 0x23
     f0a:	7c a1       	ldd	r23, Y+36	; 0x24
     f0c:	8d a1       	ldd	r24, Y+37	; 0x25
     f0e:	9e a1       	ldd	r25, Y+38	; 0x26
     f10:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9a a3       	std	Y+34, r25	; 0x22
     f1a:	89 a3       	std	Y+33, r24	; 0x21
     f1c:	89 a1       	ldd	r24, Y+33	; 0x21
     f1e:	9a a1       	ldd	r25, Y+34	; 0x22
     f20:	9e 8f       	std	Y+30, r25	; 0x1e
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
     f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <lcd_set_4bit+0x7c8>
     f2c:	9e 8f       	std	Y+30, r25	; 0x1e
     f2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     f30:	a8 e2       	ldi	r26, 0x28	; 40
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e8 e2       	ldi	r30, 0x28	; 40
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8b 7f       	andi	r24, 0xFB	; 251
     f3c:	8c 93       	st	X, r24
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e8       	ldi	r26, 0x80	; 128
     f44:	bf e3       	ldi	r27, 0x3F	; 63
     f46:	89 8f       	std	Y+25, r24	; 0x19
     f48:	9a 8f       	std	Y+26, r25	; 0x1a
     f4a:	ab 8f       	std	Y+27, r26	; 0x1b
     f4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	69 8d       	ldd	r22, Y+25	; 0x19
     f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f56:	2d ec       	ldi	r18, 0xCD	; 205
     f58:	3c ec       	ldi	r19, 0xCC	; 204
     f5a:	4c e2       	ldi	r20, 0x2C	; 44
     f5c:	55 e4       	ldi	r21, 0x45	; 69
     f5e:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8d 8b       	std	Y+21, r24	; 0x15
     f68:	9e 8b       	std	Y+22, r25	; 0x16
     f6a:	af 8b       	std	Y+23, r26	; 0x17
     f6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <lcd_set_4bit+0x830>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 8b       	std	Y+20, r25	; 0x14
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     f90:	6d 89       	ldd	r22, Y+21	; 0x15
     f92:	7e 89       	ldd	r23, Y+22	; 0x16
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	98 8d       	ldd	r25, Y+24	; 0x18
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	4c f5       	brge	.+82     	; 0xffa <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <lcd_set_4bit+0x890>
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	9a 8b       	std	Y+18, r25	; 0x12
     fd8:	89 8b       	std	Y+17, r24	; 0x11
     fda:	89 89       	ldd	r24, Y+17	; 0x11
     fdc:	9a 89       	ldd	r25, Y+18	; 0x12
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <lcd_set_4bit+0x87e>
     fe2:	9a 8b       	std	Y+18, r25	; 0x12
     fe4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	8b 89       	ldd	r24, Y+19	; 0x13
     fe8:	9c 89       	ldd	r25, Y+20	; 0x14
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff0:	8b 89       	ldd	r24, Y+19	; 0x13
     ff2:	9c 89       	ldd	r25, Y+20	; 0x14
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <lcd_set_4bit+0x872>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9c 8b       	std	Y+20, r25	; 0x14
    100c:	8b 8b       	std	Y+19, r24	; 0x13
    100e:	8b 89       	ldd	r24, Y+19	; 0x13
    1010:	9c 89       	ldd	r25, Y+20	; 0x14
    1012:	98 8b       	std	Y+16, r25	; 0x10
    1014:	8f 87       	std	Y+15, r24	; 0x0f
    1016:	8f 85       	ldd	r24, Y+15	; 0x0f
    1018:	98 89       	ldd	r25, Y+16	; 0x10
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <lcd_set_4bit+0x8ba>
    101e:	98 8b       	std	Y+16, r25	; 0x10
    1020:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1022:	a8 e2       	ldi	r26, 0x28	; 40
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e2       	ldi	r30, 0x28	; 40
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1030:	a8 e2       	ldi	r26, 0x28	; 40
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e8 e2       	ldi	r30, 0x28	; 40
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8d 7f       	andi	r24, 0xFD	; 253
    103c:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    103e:	e8 e2       	ldi	r30, 0x28	; 40
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1046:	a8 e2       	ldi	r26, 0x28	; 40
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e2       	ldi	r30, 0x28	; 40
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	84 60       	ori	r24, 0x04	; 4
    1052:	8c 93       	st	X, r24
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e8       	ldi	r26, 0x80	; 128
    105a:	bf e3       	ldi	r27, 0x3F	; 63
    105c:	8b 87       	std	Y+11, r24	; 0x0b
    105e:	9c 87       	std	Y+12, r25	; 0x0c
    1060:	ad 87       	std	Y+13, r26	; 0x0d
    1062:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	2d ec       	ldi	r18, 0xCD	; 205
    106e:	3c ec       	ldi	r19, 0xCC	; 204
    1070:	4c e2       	ldi	r20, 0x2C	; 44
    1072:	55 e4       	ldi	r21, 0x45	; 69
    1074:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8f 83       	std	Y+7, r24	; 0x07
    107e:	98 87       	std	Y+8, r25	; 0x08
    1080:	a9 87       	std	Y+9, r26	; 0x09
    1082:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    1098:	88 23       	and	r24, r24
    109a:	2c f4       	brge	.+10     	; 0x10a6 <lcd_set_4bit+0x946>
		__ticks = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	4c f5       	brge	.+82     	; 0x1110 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <lcd_set_4bit+0x9a6>
    10e8:	84 e1       	ldi	r24, 0x14	; 20
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <lcd_set_4bit+0x994>
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	69 f7       	brne	.-38     	; 0x10e8 <lcd_set_4bit+0x988>
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9e 83       	std	Y+6, r25	; 0x06
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <lcd_set_4bit+0x9d0>
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1138:	a8 e2       	ldi	r26, 0x28	; 40
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e2       	ldi	r30, 0x28	; 40
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8b 7f       	andi	r24, 0xFB	; 251
    1144:	8c 93       	st	X, r24

	
}
    1146:	c0 59       	subi	r28, 0x90	; 144
    1148:	df 4f       	sbci	r29, 0xFF	; 255
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	2e 97       	sbiw	r28, 0x0e	; 14
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
    1172:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_port_config>
	lcd_set_4bit();
    1176:	0e 94 b0 03 	call	0x760	; 0x760 <lcd_set_4bit>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e8       	ldi	r26, 0x80	; 128
    1180:	bf e3       	ldi	r27, 0x3F	; 63
    1182:	8b 87       	std	Y+11, r24	; 0x0b
    1184:	9c 87       	std	Y+12, r25	; 0x0c
    1186:	ad 87       	std	Y+13, r26	; 0x0d
    1188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118a:	6b 85       	ldd	r22, Y+11	; 0x0b
    118c:	7c 85       	ldd	r23, Y+12	; 0x0c
    118e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1190:	9e 85       	ldd	r25, Y+14	; 0x0e
    1192:	2d ec       	ldi	r18, 0xCD	; 205
    1194:	3c ec       	ldi	r19, 0xCC	; 204
    1196:	4c e2       	ldi	r20, 0x2C	; 44
    1198:	55 e4       	ldi	r21, 0x45	; 69
    119a:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	8f 83       	std	Y+7, r24	; 0x07
    11a4:	98 87       	std	Y+8, r25	; 0x08
    11a6:	a9 87       	std	Y+9, r26	; 0x09
    11a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11aa:	6f 81       	ldd	r22, Y+7	; 0x07
    11ac:	78 85       	ldd	r23, Y+8	; 0x08
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	5f e3       	ldi	r21, 0x3F	; 63
    11ba:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    11be:	88 23       	and	r24, r24
    11c0:	2c f4       	brge	.+10     	; 0x11cc <lcd_init+0x6e>
		__ticks = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <lcd_init+0xec>
	else if (__tmp > 65535)
    11cc:	6f 81       	ldd	r22, Y+7	; 0x07
    11ce:	78 85       	ldd	r23, Y+8	; 0x08
    11d0:	89 85       	ldd	r24, Y+9	; 0x09
    11d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	57 e4       	ldi	r21, 0x47	; 71
    11dc:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	4c f5       	brge	.+82     	; 0x1236 <lcd_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	51 e4       	ldi	r21, 0x41	; 65
    11f4:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	0f c0       	rjmp	.+30     	; 0x122c <lcd_init+0xce>
    120e:	84 e1       	ldi	r24, 0x14	; 20
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	8b 83       	std	Y+3, r24	; 0x03
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <lcd_init+0xbc>
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	69 f7       	brne	.-38     	; 0x120e <lcd_init+0xb0>
    1234:	14 c0       	rjmp	.+40     	; 0x125e <lcd_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	6f 81       	ldd	r22, Y+7	; 0x07
    1238:	78 85       	ldd	r23, Y+8	; 0x08
    123a:	89 85       	ldd	r24, Y+9	; 0x09
    123c:	9a 85       	ldd	r25, Y+10	; 0x0a
    123e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <lcd_init+0xf8>
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    125e:	88 e2       	ldi	r24, 0x28	; 40
    1260:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
	lcd_wr_command(0x01);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
	lcd_wr_command(0x06);
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
	lcd_wr_command(0x0E);
    1270:	8e e0       	ldi	r24, 0x0E	; 14
    1272:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
	lcd_wr_command(0x80);
    1276:	80 e8       	ldi	r24, 0x80	; 128
    1278:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
	
		
}
    127c:	2e 96       	adiw	r28, 0x0e	; 14
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	6e 97       	sbiw	r28, 0x1e	; 30
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    12a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12a6:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    12a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12aa:	80 7f       	andi	r24, 0xF0	; 240
    12ac:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    12ae:	a8 e2       	ldi	r26, 0x28	; 40
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e2       	ldi	r30, 0x28	; 40
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8c 93       	st	X, r24
	lcd_port |= temp;
    12bc:	a8 e2       	ldi	r26, 0x28	; 40
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e8 e2       	ldi	r30, 0x28	; 40
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	90 81       	ld	r25, Z
    12c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c8:	89 2b       	or	r24, r25
    12ca:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    12cc:	a8 e2       	ldi	r26, 0x28	; 40
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e8 e2       	ldi	r30, 0x28	; 40
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    12da:	a8 e2       	ldi	r26, 0x28	; 40
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e2       	ldi	r30, 0x28	; 40
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8d 7f       	andi	r24, 0xFD	; 253
    12e6:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    12e8:	a8 e2       	ldi	r26, 0x28	; 40
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e8 e2       	ldi	r30, 0x28	; 40
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	84 60       	ori	r24, 0x04	; 4
    12f4:	8c 93       	st	X, r24
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 ea       	ldi	r26, 0xA0	; 160
    12fc:	b0 e4       	ldi	r27, 0x40	; 64
    12fe:	89 8f       	std	Y+25, r24	; 0x19
    1300:	9a 8f       	std	Y+26, r25	; 0x1a
    1302:	ab 8f       	std	Y+27, r26	; 0x1b
    1304:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	69 8d       	ldd	r22, Y+25	; 0x19
    1308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130e:	2d ec       	ldi	r18, 0xCD	; 205
    1310:	3c ec       	ldi	r19, 0xCC	; 204
    1312:	4c e2       	ldi	r20, 0x2C	; 44
    1314:	55 e4       	ldi	r21, 0x45	; 69
    1316:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8d 8b       	std	Y+21, r24	; 0x15
    1320:	9e 8b       	std	Y+22, r25	; 0x16
    1322:	af 8b       	std	Y+23, r26	; 0x17
    1324:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <lcd_wr_command+0xba>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 8b       	std	Y+20, r25	; 0x14
    1344:	8b 8b       	std	Y+19, r24	; 0x13
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1348:	6d 89       	ldd	r22, Y+21	; 0x15
    134a:	7e 89       	ldd	r23, Y+22	; 0x16
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	69 8d       	ldd	r22, Y+25	; 0x19
    1362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <lcd_wr_command+0x11a>
    138a:	84 e1       	ldi	r24, 0x14	; 20
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <lcd_wr_command+0x108>
    139a:	9a 8b       	std	Y+18, r25	; 0x12
    139c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <lcd_wr_command+0xfc>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6d 89       	ldd	r22, Y+21	; 0x15
    13b4:	7e 89       	ldd	r23, Y+22	; 0x16
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	98 89       	ldd	r25, Y+16	; 0x10
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <lcd_wr_command+0x144>
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    13da:	a8 e2       	ldi	r26, 0x28	; 40
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e8 e2       	ldi	r30, 0x28	; 40
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8b 7f       	andi	r24, 0xFB	; 251
    13e6:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    13e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ea:	8f 70       	andi	r24, 0x0F	; 15
    13ec:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    13ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f0:	82 95       	swap	r24
    13f2:	80 7f       	andi	r24, 0xF0	; 240
    13f4:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    13f6:	a8 e2       	ldi	r26, 0x28	; 40
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e2       	ldi	r30, 0x28	; 40
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1404:	a8 e2       	ldi	r26, 0x28	; 40
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e2       	ldi	r30, 0x28	; 40
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	90 81       	ld	r25, Z
    140e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1410:	89 2b       	or	r24, r25
    1412:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1414:	a8 e2       	ldi	r26, 0x28	; 40
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e2       	ldi	r30, 0x28	; 40
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8e 7f       	andi	r24, 0xFE	; 254
    1420:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1422:	a8 e2       	ldi	r26, 0x28	; 40
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e8 e2       	ldi	r30, 0x28	; 40
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1430:	a8 e2       	ldi	r26, 0x28	; 40
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e8 e2       	ldi	r30, 0x28	; 40
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	84 60       	ori	r24, 0x04	; 4
    143c:	8c 93       	st	X, r24
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a0 ea       	ldi	r26, 0xA0	; 160
    1444:	b0 e4       	ldi	r27, 0x40	; 64
    1446:	8b 87       	std	Y+11, r24	; 0x0b
    1448:	9c 87       	std	Y+12, r25	; 0x0c
    144a:	ad 87       	std	Y+13, r26	; 0x0d
    144c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	2d ec       	ldi	r18, 0xCD	; 205
    1458:	3c ec       	ldi	r19, 0xCC	; 204
    145a:	4c e2       	ldi	r20, 0x2C	; 44
    145c:	55 e4       	ldi	r21, 0x45	; 69
    145e:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8f 83       	std	Y+7, r24	; 0x07
    1468:	98 87       	std	Y+8, r25	; 0x08
    146a:	a9 87       	std	Y+9, r26	; 0x09
    146c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	5f e3       	ldi	r21, 0x3F	; 63
    147e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    1482:	88 23       	and	r24, r24
    1484:	2c f4       	brge	.+10     	; 0x1490 <lcd_wr_command+0x202>
		__ticks = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	3f c0       	rjmp	.+126    	; 0x150e <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1490:	6f 81       	ldd	r22, Y+7	; 0x07
    1492:	78 85       	ldd	r23, Y+8	; 0x08
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	3f ef       	ldi	r19, 0xFF	; 255
    149c:	4f e7       	ldi	r20, 0x7F	; 127
    149e:	57 e4       	ldi	r21, 0x47	; 71
    14a0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    14a4:	18 16       	cp	r1, r24
    14a6:	4c f5       	brge	.+82     	; 0x14fa <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <lcd_wr_command+0x262>
    14d2:	84 e1       	ldi	r24, 0x14	; 20
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	9c 83       	std	Y+4, r25	; 0x04
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <lcd_wr_command+0x250>
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	69 f7       	brne	.-38     	; 0x14d2 <lcd_wr_command+0x244>
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <lcd_wr_command+0x28c>
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1522:	a8 e2       	ldi	r26, 0x28	; 40
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e8 e2       	ldi	r30, 0x28	; 40
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8b 7f       	andi	r24, 0xFB	; 251
    152e:	8c 93       	st	X, r24
}
    1530:	6e 96       	adiw	r28, 0x1e	; 30
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	6e 97       	sbiw	r28, 0x1e	; 30
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1558:	8e 8d       	ldd	r24, Y+30	; 0x1e
    155a:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    155c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155e:	80 7f       	andi	r24, 0xF0	; 240
    1560:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1562:	a8 e2       	ldi	r26, 0x28	; 40
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e8 e2       	ldi	r30, 0x28	; 40
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8f 70       	andi	r24, 0x0F	; 15
    156e:	8c 93       	st	X, r24
	lcd_port |= temp;
    1570:	a8 e2       	ldi	r26, 0x28	; 40
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e8 e2       	ldi	r30, 0x28	; 40
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	90 81       	ld	r25, Z
    157a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157c:	89 2b       	or	r24, r25
    157e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1580:	a8 e2       	ldi	r26, 0x28	; 40
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 e2       	ldi	r30, 0x28	; 40
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    158e:	a8 e2       	ldi	r26, 0x28	; 40
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e2       	ldi	r30, 0x28	; 40
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8d 7f       	andi	r24, 0xFD	; 253
    159a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    159c:	a8 e2       	ldi	r26, 0x28	; 40
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e8 e2       	ldi	r30, 0x28	; 40
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	8c 93       	st	X, r24
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 ea       	ldi	r26, 0xA0	; 160
    15b0:	b0 e4       	ldi	r27, 0x40	; 64
    15b2:	89 8f       	std	Y+25, r24	; 0x19
    15b4:	9a 8f       	std	Y+26, r25	; 0x1a
    15b6:	ab 8f       	std	Y+27, r26	; 0x1b
    15b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ba:	69 8d       	ldd	r22, Y+25	; 0x19
    15bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c2:	2d ec       	ldi	r18, 0xCD	; 205
    15c4:	3c ec       	ldi	r19, 0xCC	; 204
    15c6:	4c e2       	ldi	r20, 0x2C	; 44
    15c8:	55 e4       	ldi	r21, 0x45	; 69
    15ca:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8d 8b       	std	Y+21, r24	; 0x15
    15d4:	9e 8b       	std	Y+22, r25	; 0x16
    15d6:	af 8b       	std	Y+23, r26	; 0x17
    15d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15da:	6d 89       	ldd	r22, Y+21	; 0x15
    15dc:	7e 89       	ldd	r23, Y+22	; 0x16
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <lcd_wr_char+0xba>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
    15fa:	3f c0       	rjmp	.+126    	; 0x167a <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f e7       	ldi	r20, 0x7F	; 127
    160a:	57 e4       	ldi	r21, 0x47	; 71
    160c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    1610:	18 16       	cp	r1, r24
    1612:	4c f5       	brge	.+82     	; 0x1666 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	69 8d       	ldd	r22, Y+25	; 0x19
    1616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e2       	ldi	r20, 0x20	; 32
    1622:	51 e4       	ldi	r21, 0x41	; 65
    1624:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9c 8b       	std	Y+20, r25	; 0x14
    163a:	8b 8b       	std	Y+19, r24	; 0x13
    163c:	0f c0       	rjmp	.+30     	; 0x165c <lcd_wr_char+0x11a>
    163e:	84 e1       	ldi	r24, 0x14	; 20
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	9a 8b       	std	Y+18, r25	; 0x12
    1644:	89 8b       	std	Y+17, r24	; 0x11
    1646:	89 89       	ldd	r24, Y+17	; 0x11
    1648:	9a 89       	ldd	r25, Y+18	; 0x12
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <lcd_wr_char+0x108>
    164e:	9a 8b       	std	Y+18, r25	; 0x12
    1650:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1652:	8b 89       	ldd	r24, Y+19	; 0x13
    1654:	9c 89       	ldd	r25, Y+20	; 0x14
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	9c 8b       	std	Y+20, r25	; 0x14
    165a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f7       	brne	.-38     	; 0x163e <lcd_wr_char+0xfc>
    1664:	14 c0       	rjmp	.+40     	; 0x168e <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	6d 89       	ldd	r22, Y+21	; 0x15
    1668:	7e 89       	ldd	r23, Y+22	; 0x16
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9c 8b       	std	Y+20, r25	; 0x14
    1678:	8b 8b       	std	Y+19, r24	; 0x13
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	98 8b       	std	Y+16, r25	; 0x10
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	8f 85       	ldd	r24, Y+15	; 0x0f
    1684:	98 89       	ldd	r25, Y+16	; 0x10
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <lcd_wr_char+0x144>
    168a:	98 8b       	std	Y+16, r25	; 0x10
    168c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    168e:	a8 e2       	ldi	r26, 0x28	; 40
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e8 e2       	ldi	r30, 0x28	; 40
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8b 7f       	andi	r24, 0xFB	; 251
    169a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    169c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    169e:	8f 70       	andi	r24, 0x0F	; 15
    16a0:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    16a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a4:	82 95       	swap	r24
    16a6:	80 7f       	andi	r24, 0xF0	; 240
    16a8:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    16aa:	a8 e2       	ldi	r26, 0x28	; 40
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e2       	ldi	r30, 0x28	; 40
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 70       	andi	r24, 0x0F	; 15
    16b6:	8c 93       	st	X, r24
	lcd_port |= letter;
    16b8:	a8 e2       	ldi	r26, 0x28	; 40
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e8 e2       	ldi	r30, 0x28	; 40
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	90 81       	ld	r25, Z
    16c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16c4:	89 2b       	or	r24, r25
    16c6:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    16c8:	a8 e2       	ldi	r26, 0x28	; 40
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e2       	ldi	r30, 0x28	; 40
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    16d6:	a8 e2       	ldi	r26, 0x28	; 40
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e8 e2       	ldi	r30, 0x28	; 40
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8d 7f       	andi	r24, 0xFD	; 253
    16e2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    16e4:	a8 e2       	ldi	r26, 0x28	; 40
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e2       	ldi	r30, 0x28	; 40
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	84 60       	ori	r24, 0x04	; 4
    16f0:	8c 93       	st	X, r24
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 ea       	ldi	r26, 0xA0	; 160
    16f8:	b0 e4       	ldi	r27, 0x40	; 64
    16fa:	8b 87       	std	Y+11, r24	; 0x0b
    16fc:	9c 87       	std	Y+12, r25	; 0x0c
    16fe:	ad 87       	std	Y+13, r26	; 0x0d
    1700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	6b 85       	ldd	r22, Y+11	; 0x0b
    1704:	7c 85       	ldd	r23, Y+12	; 0x0c
    1706:	8d 85       	ldd	r24, Y+13	; 0x0d
    1708:	9e 85       	ldd	r25, Y+14	; 0x0e
    170a:	2d ec       	ldi	r18, 0xCD	; 205
    170c:	3c ec       	ldi	r19, 0xCC	; 204
    170e:	4c e2       	ldi	r20, 0x2C	; 44
    1710:	55 e4       	ldi	r21, 0x45	; 69
    1712:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8f 83       	std	Y+7, r24	; 0x07
    171c:	98 87       	std	Y+8, r25	; 0x08
    171e:	a9 87       	std	Y+9, r26	; 0x09
    1720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <lcd_wr_char+0x202>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	6b 85       	ldd	r22, Y+11	; 0x0b
    175e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1760:	8d 85       	ldd	r24, Y+13	; 0x0d
    1762:	9e 85       	ldd	r25, Y+14	; 0x0e
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <lcd_wr_char+0x262>
    1786:	84 e1       	ldi	r24, 0x14	; 20
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <lcd_wr_char+0x250>
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <lcd_wr_char+0x244>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <lcd_wr_char+0x28c>
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    17d6:	a8 e2       	ldi	r26, 0x28	; 40
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e8 e2       	ldi	r30, 0x28	; 40
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8b 7f       	andi	r24, 0xFB	; 251
    17e2:	8c 93       	st	X, r24
}
    17e4:	6e 96       	adiw	r28, 0x1e	; 30
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    17fe:	80 e8       	ldi	r24, 0x80	; 128
    1800:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	0f 92       	push	r0
    1810:	0f 92       	push	r0
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	80 81       	ld	r24, Z
    1822:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
		str++;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	80 81       	ld	r24, Z
    1836:	88 23       	and	r24, r24
    1838:	89 f7       	brne	.-30     	; 0x181c <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <lcd_cursor+0x6>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	d9 f0       	breq	.+54     	; 0x189e <lcd_cursor+0x5a>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	23 30       	cpi	r18, 0x03	; 3
    186e:	31 05       	cpc	r19, r1
    1870:	34 f4       	brge	.+12     	; 0x187e <lcd_cursor+0x3a>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	61 f0       	breq	.+24     	; 0x1894 <lcd_cursor+0x50>
    187c:	1e c0       	rjmp	.+60     	; 0x18ba <lcd_cursor+0x76>
    187e:	2b 81       	ldd	r18, Y+3	; 0x03
    1880:	3c 81       	ldd	r19, Y+4	; 0x04
    1882:	23 30       	cpi	r18, 0x03	; 3
    1884:	31 05       	cpc	r19, r1
    1886:	81 f0       	breq	.+32     	; 0x18a8 <lcd_cursor+0x64>
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	91 05       	cpc	r25, r1
    1890:	81 f0       	breq	.+32     	; 0x18b2 <lcd_cursor+0x6e>
    1892:	13 c0       	rjmp	.+38     	; 0x18ba <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	81 58       	subi	r24, 0x81	; 129
    1898:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
    189c:	0e c0       	rjmp	.+28     	; 0x18ba <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	81 54       	subi	r24, 0x41	; 65
    18a2:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
    18a6:	09 c0       	rjmp	.+18     	; 0x18ba <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	8d 56       	subi	r24, 0x6D	; 109
    18ac:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	8d 52       	subi	r24, 0x2D	; 45
    18b6:	0e 94 47 09 	call	0x128e	; 0x128e <lcd_wr_command>
		default: break;
	}
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	27 97       	sbiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	6b 83       	std	Y+3, r22	; 0x03
    18e0:	5d 83       	std	Y+5, r21	; 0x05
    18e2:	4c 83       	std	Y+4, r20	; 0x04
    18e4:	3f 83       	std	Y+7, r19	; 0x07
    18e6:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    18e8:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	88 23       	and	r24, r24
    18ee:	19 f0       	breq	.+6      	; 0x18f6 <lcd_print+0x2e>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 23       	and	r24, r24
    18f4:	19 f4       	brne	.+6      	; 0x18fc <lcd_print+0x34>
	{
		lcd_home();
    18f6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <lcd_home>
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1900:	0e 94 22 0c 	call	0x1844	; 0x1844 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	9f 81       	ldd	r25, Y+7	; 0x07
    1908:	85 30       	cpi	r24, 0x05	; 5
    190a:	91 05       	cpc	r25, r1
    190c:	19 f0       	breq	.+6      	; 0x1914 <lcd_print+0x4c>
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	a9 f4       	brne	.+42     	; 0x193e <lcd_print+0x76>
	{
		million=value/10000+48;
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	20 e1       	ldi	r18, 0x10	; 16
    191a:	37 e2       	ldi	r19, 0x27	; 39
    191c:	b9 01       	movw	r22, r18
    191e:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    1922:	cb 01       	movw	r24, r22
    1924:	c0 96       	adiw	r24, 0x30	; 48
    1926:	90 93 15 07 	sts	0x0715, r25
    192a:	80 93 14 07 	sts	0x0714, r24
		lcd_wr_char(million);
    192e:	80 91 14 07 	lds	r24, 0x0714
    1932:	90 91 15 07 	lds	r25, 0x0715
    1936:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
		flag=1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    193e:	8e 81       	ldd	r24, Y+6	; 0x06
    1940:	9f 81       	ldd	r25, Y+7	; 0x07
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	91 05       	cpc	r25, r1
    1946:	19 f0       	breq	.+6      	; 0x194e <lcd_print+0x86>
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	11 f5       	brne	.+68     	; 0x1992 <lcd_print+0xca>
	{
		temp = value/1000;
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	28 ee       	ldi	r18, 0xE8	; 232
    1954:	33 e0       	ldi	r19, 0x03	; 3
    1956:	b9 01       	movw	r22, r18
    1958:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    195c:	cb 01       	movw	r24, r22
    195e:	90 93 17 07 	sts	0x0717, r25
    1962:	80 93 16 07 	sts	0x0716, r24
		thousand = temp%10 + 48;
    1966:	80 91 16 07 	lds	r24, 0x0716
    196a:	90 91 17 07 	lds	r25, 0x0717
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	b9 01       	movw	r22, r18
    1974:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    1978:	c0 96       	adiw	r24, 0x30	; 48
    197a:	90 93 f3 0e 	sts	0x0EF3, r25
    197e:	80 93 f2 0e 	sts	0x0EF2, r24
		lcd_wr_char(thousand);
    1982:	80 91 f2 0e 	lds	r24, 0x0EF2
    1986:	90 91 f3 0e 	lds	r25, 0x0EF3
    198a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
		flag=1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1992:	8e 81       	ldd	r24, Y+6	; 0x06
    1994:	9f 81       	ldd	r25, Y+7	; 0x07
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	91 05       	cpc	r25, r1
    199a:	19 f0       	breq	.+6      	; 0x19a2 <lcd_print+0xda>
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	11 f5       	brne	.+68     	; 0x19e6 <lcd_print+0x11e>
	{
		temp = value/100;
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	9d 81       	ldd	r25, Y+5	; 0x05
    19a6:	24 e6       	ldi	r18, 0x64	; 100
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	b9 01       	movw	r22, r18
    19ac:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    19b0:	cb 01       	movw	r24, r22
    19b2:	90 93 17 07 	sts	0x0717, r25
    19b6:	80 93 16 07 	sts	0x0716, r24
		hundred = temp%10 + 48;
    19ba:	80 91 16 07 	lds	r24, 0x0716
    19be:	90 91 17 07 	lds	r25, 0x0717
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	b9 01       	movw	r22, r18
    19c8:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    19cc:	c0 96       	adiw	r24, 0x30	; 48
    19ce:	90 93 eb 0e 	sts	0x0EEB, r25
    19d2:	80 93 ea 0e 	sts	0x0EEA, r24
		lcd_wr_char(hundred);
    19d6:	80 91 ea 0e 	lds	r24, 0x0EEA
    19da:	90 91 eb 0e 	lds	r25, 0x0EEB
    19de:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
		flag=1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	91 05       	cpc	r25, r1
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <lcd_print+0x12e>
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	11 f5       	brne	.+68     	; 0x1a3a <lcd_print+0x172>
	{
		temp = value/10;
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	2a e0       	ldi	r18, 0x0A	; 10
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	b9 01       	movw	r22, r18
    1a00:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    1a04:	cb 01       	movw	r24, r22
    1a06:	90 93 17 07 	sts	0x0717, r25
    1a0a:	80 93 16 07 	sts	0x0716, r24
		tens = temp%10 + 48;
    1a0e:	80 91 16 07 	lds	r24, 0x0716
    1a12:	90 91 17 07 	lds	r25, 0x0717
    1a16:	2a e0       	ldi	r18, 0x0A	; 10
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    1a20:	c0 96       	adiw	r24, 0x30	; 48
    1a22:	90 93 e9 0e 	sts	0x0EE9, r25
    1a26:	80 93 e8 0e 	sts	0x0EE8, r24
		lcd_wr_char(tens);
    1a2a:	80 91 e8 0e 	lds	r24, 0x0EE8
    1a2e:	90 91 e9 0e 	lds	r25, 0x0EE9
    1a32:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
		flag=1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <lcd_print+0x182>
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	91 f4       	brne	.+36     	; 0x1a6e <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    1a58:	c0 96       	adiw	r24, 0x30	; 48
    1a5a:	90 93 f1 0e 	sts	0x0EF1, r25
    1a5e:	80 93 f0 0e 	sts	0x0EF0, r24
		lcd_wr_char(unit);
    1a62:	80 91 f0 0e 	lds	r24, 0x0EF0
    1a66:	90 91 f1 0e 	lds	r25, 0x0EF1
    1a6a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
	}
	if(digits>5)
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	86 30       	cpi	r24, 0x06	; 6
    1a74:	91 05       	cpc	r25, r1
    1a76:	1c f0       	brlt	.+6      	; 0x1a7e <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1a78:	85 e4       	ldi	r24, 0x45	; 69
    1a7a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
	}
	
}
    1a7e:	27 96       	adiw	r28, 0x07	; 7
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <lcd_num>:
//! display a number on LCD
    /*!
     Function used for displaying a number on LCD
    */
void lcd_num(int x)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	2d 97       	sbiw	r28, 0x0d	; 13
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	9d 87       	std	Y+13, r25	; 0x0d
    1aa6:	8c 87       	std	Y+12, r24	; 0x0c

    lcd_cursor(1,5);
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	65 e0       	ldi	r22, 0x05	; 5
    1aac:	0e 94 22 0c 	call	0x1844	; 0x1844 <lcd_cursor>

char cVal[10];
itoa(x,cVal,10);
    1ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ab2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ab4:	9e 01       	movw	r18, r28
    1ab6:	2e 5f       	subi	r18, 0xFE	; 254
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	b9 01       	movw	r22, r18
    1abc:	4a e0       	ldi	r20, 0x0A	; 10
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	0e 94 12 19 	call	0x3224	; 0x3224 <itoa>
lcd_string(cVal);
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	02 96       	adiw	r24, 0x02	; 2
    1ac8:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
char a=' ';
    1acc:	80 e2       	ldi	r24, 0x20	; 32
    1ace:	89 83       	std	Y+1, r24	; 0x01
lcd_wr_char(a);
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_wr_char>
    1ad6:	2d 96       	adiw	r28, 0x0d	; 13
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <servo2_pin_config>:

int prin = 0;

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	DDRB = DDRB | 0x40; //making PORTB 6 pin output
    1af0:	a4 e2       	ldi	r26, 0x24	; 36
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e4 e2       	ldi	r30, 0x24	; 36
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	8c 93       	st	X, r24
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1afe:	a5 e2       	ldi	r26, 0x25	; 37
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e2       	ldi	r30, 0x25	; 37
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00; //stop
    1b1a:	e1 e8       	ldi	r30, 0x81	; 129
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	10 82       	st	Z, r1
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1b20:	e5 e8       	ldi	r30, 0x85	; 133
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8c ef       	ldi	r24, 0xFC	; 252
    1b26:	80 83       	st	Z, r24
	TCNT1L = 0x01; //Counter low value to which OCR1xH value is to be compared with
    1b28:	e4 e8       	ldi	r30, 0x84	; 132
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 83       	st	Z, r24
	OCR1BH = 0x03; //Output compare Register high value for servo 2
    1b30:	eb e8       	ldi	r30, 0x8B	; 139
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Output Compare Register low Value For servo 2
    1b38:	ea e8       	ldi	r30, 0x8A	; 138
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
	ICR1H = 0x03;
    1b40:	e7 e8       	ldi	r30, 0x87	; 135
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	80 83       	st	Z, r24
	ICR1L = 0xFF;
    1b48:	e6 e8       	ldi	r30, 0x86	; 134
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	80 83       	st	Z, r24
	TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1b50:	e0 e8       	ldi	r30, 0x80	; 128
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8b ea       	ldi	r24, 0xAB	; 171
    1b56:	80 83       	st	Z, r24
	For Overriding normal port functionality to OCRnA outputs.
	{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	TCCR1C = 0x00;
    1b58:	e2 e8       	ldi	r30, 0x82	; 130
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	10 82       	st	Z, r1
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1b5e:	e1 e8       	ldi	r30, 0x81	; 129
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8c e0       	ldi	r24, 0x0C	; 12
    1b64:	80 83       	st	Z, r24
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <uart3_init>:

void uart3_init(void)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
 UCSR3B = 0x00; //disable while setting baud rate
    1b74:	e1 e3       	ldi	r30, 0x31	; 49
    1b76:	f1 e0       	ldi	r31, 0x01	; 1
    1b78:	10 82       	st	Z, r1
 UCSR3A = 0x00;
    1b7a:	e0 e3       	ldi	r30, 0x30	; 48
    1b7c:	f1 e0       	ldi	r31, 0x01	; 1
    1b7e:	10 82       	st	Z, r1
 UCSR3C = 0x06;
    1b80:	e2 e3       	ldi	r30, 0x32	; 50
    1b82:	f1 e0       	ldi	r31, 0x01	; 1
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	80 83       	st	Z, r24
 //This is for 14745600
 //UBRR3L = 0x5F; //set baud rate lo
 UBRR3L = 0x5F;
    1b88:	e4 e3       	ldi	r30, 0x34	; 52
    1b8a:	f1 e0       	ldi	r31, 0x01	; 1
    1b8c:	8f e5       	ldi	r24, 0x5F	; 95
    1b8e:	80 83       	st	Z, r24
 UBRR3H = 0x00; //set baud rate hi
    1b90:	e5 e3       	ldi	r30, 0x35	; 53
    1b92:	f1 e0       	ldi	r31, 0x01	; 1
    1b94:	10 82       	st	Z, r1
 UCSR3B = 0x98;
    1b96:	e1 e3       	ldi	r30, 0x31	; 49
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	88 e9       	ldi	r24, 0x98	; 152
    1b9c:	80 83       	st	Z, r24
}
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <buzzer_pin_config>:


void buzzer_pin_config (void)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1bac:	a7 e2       	ldi	r26, 0x27	; 39
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e7 e2       	ldi	r30, 0x27	; 39
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 60       	ori	r24, 0x08	; 8
    1bb8:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1bba:	a8 e2       	ldi	r26, 0x28	; 40
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e2       	ldi	r30, 0x28	; 40
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 7f       	andi	r24, 0xF7	; 247
    1bc6:	8c 93       	st	X, r24
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <buzzer_on>:

void buzzer_on (void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1bda:	e6 e2       	ldi	r30, 0x26	; 38
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	88 60       	ori	r24, 0x08	; 8
    1be6:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1be8:	e8 e2       	ldi	r30, 0x28	; 40
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	80 83       	st	Z, r24
}
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <buzzer_off>:

void buzzer_off (void)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	0f 92       	push	r0
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1c02:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1c04:	e6 e2       	ldi	r30, 0x26	; 38
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	87 7f       	andi	r24, 0xF7	; 247
    1c10:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1c12:	e8 e2       	ldi	r30, 0x28	; 40
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	80 83       	st	Z, r24
}
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <__vector_54>:

int flag = 0; 

SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	00 90 5b 00 	lds	r0, 0x005B
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <__vector_54+0x26>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data1 = UDR3;
    1c4c:	e6 e3       	ldi	r30, 0x36	; 54
    1c4e:	f1 e0       	ldi	r31, 0x01	; 1
    1c50:	80 81       	ld	r24, Z
    1c52:	8b 83       	std	Y+3, r24	; 0x03

	int i = data1 - '0';
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	c0 97       	sbiw	r24, 0x30	; 48
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	

	if(data1 == 0x24){
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	84 32       	cpi	r24, 0x24	; 36
    1c64:	51 f4       	brne	.+20     	; 0x1c7a <__vector_54+0x58>
		data_pos++;
    1c66:	80 91 ee 0e 	lds	r24, 0x0EEE
    1c6a:	90 91 ef 0e 	lds	r25, 0x0EEF
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	90 93 ef 0e 	sts	0x0EEF, r25
    1c74:	80 93 ee 0e 	sts	0x0EEE, r24
    1c78:	89 c0       	rjmp	.+274    	; 0x1d8c <__vector_54+0x16a>
	}

	else if (data1 == 0x46){
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	86 34       	cpi	r24, 0x46	; 70
    1c7e:	81 f4       	brne	.+32     	; 0x1ca0 <__vector_54+0x7e>
		mov_array[data_pos] = 'F';
    1c80:	80 91 ee 0e 	lds	r24, 0x0EEE
    1c84:	90 91 ef 0e 	lds	r25, 0x0EEF
    1c88:	fc 01       	movw	r30, r24
    1c8a:	e4 5d       	subi	r30, 0xD4	; 212
    1c8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c8e:	86 e4       	ldi	r24, 0x46	; 70
    1c90:	80 83       	st	Z, r24
		flag  = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	90 93 29 03 	sts	0x0329, r25
    1c9a:	80 93 28 03 	sts	0x0328, r24
    1c9e:	76 c0       	rjmp	.+236    	; 0x1d8c <__vector_54+0x16a>
	}

	else if (data1 == 0x42){
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	82 34       	cpi	r24, 0x42	; 66
    1ca4:	51 f4       	brne	.+20     	; 0x1cba <__vector_54+0x98>
		mov_array[data_pos] = 'B';
    1ca6:	80 91 ee 0e 	lds	r24, 0x0EEE
    1caa:	90 91 ef 0e 	lds	r25, 0x0EEF
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e4 5d       	subi	r30, 0xD4	; 212
    1cb2:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb4:	82 e4       	ldi	r24, 0x42	; 66
    1cb6:	80 83       	st	Z, r24
    1cb8:	69 c0       	rjmp	.+210    	; 0x1d8c <__vector_54+0x16a>
		//flag  = 1;
	}

	else if (data1 == 0x52){
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	82 35       	cpi	r24, 0x52	; 82
    1cbe:	51 f4       	brne	.+20     	; 0x1cd4 <__vector_54+0xb2>
		mov_array[data_pos] = 'R';
    1cc0:	80 91 ee 0e 	lds	r24, 0x0EEE
    1cc4:	90 91 ef 0e 	lds	r25, 0x0EEF
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e4 5d       	subi	r30, 0xD4	; 212
    1ccc:	fc 4f       	sbci	r31, 0xFC	; 252
    1cce:	82 e5       	ldi	r24, 0x52	; 82
    1cd0:	80 83       	st	Z, r24
    1cd2:	5c c0       	rjmp	.+184    	; 0x1d8c <__vector_54+0x16a>
		//flag  = 1;
	}

	else if (data1 == 0x4C){
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	8c 34       	cpi	r24, 0x4C	; 76
    1cd8:	51 f4       	brne	.+20     	; 0x1cee <__vector_54+0xcc>
		mov_array[data_pos] = 'L';
    1cda:	80 91 ee 0e 	lds	r24, 0x0EEE
    1cde:	90 91 ef 0e 	lds	r25, 0x0EEF
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	e4 5d       	subi	r30, 0xD4	; 212
    1ce6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce8:	8c e4       	ldi	r24, 0x4C	; 76
    1cea:	80 83       	st	Z, r24
    1cec:	4f c0       	rjmp	.+158    	; 0x1d8c <__vector_54+0x16a>
		//flag  = 1;
	}
	
	else if (data1 == 0x44){
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	84 34       	cpi	r24, 0x44	; 68
    1cf2:	51 f4       	brne	.+20     	; 0x1d08 <__vector_54+0xe6>
		mov_array[data_pos] = 'D';
    1cf4:	80 91 ee 0e 	lds	r24, 0x0EEE
    1cf8:	90 91 ef 0e 	lds	r25, 0x0EEF
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e4 5d       	subi	r30, 0xD4	; 212
    1d00:	fc 4f       	sbci	r31, 0xFC	; 252
    1d02:	84 e4       	ldi	r24, 0x44	; 68
    1d04:	80 83       	st	Z, r24
    1d06:	42 c0       	rjmp	.+132    	; 0x1d8c <__vector_54+0x16a>
		//flag  = 1;
	}
	
	else if (data1 == 0x55){
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	85 35       	cpi	r24, 0x55	; 85
    1d0c:	51 f4       	brne	.+20     	; 0x1d22 <__vector_54+0x100>
		mov_array[data_pos] = 'U';
    1d0e:	80 91 ee 0e 	lds	r24, 0x0EEE
    1d12:	90 91 ef 0e 	lds	r25, 0x0EEF
    1d16:	fc 01       	movw	r30, r24
    1d18:	e4 5d       	subi	r30, 0xD4	; 212
    1d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1c:	85 e5       	ldi	r24, 0x55	; 85
    1d1e:	80 83       	st	Z, r24
    1d20:	35 c0       	rjmp	.+106    	; 0x1d8c <__vector_54+0x16a>
		//flag  = 1;
	}

	else if ( i <= 10 &&  i > -1 && flag == 1){
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	8b 30       	cpi	r24, 0x0B	; 11
    1d28:	91 05       	cpc	r25, r1
    1d2a:	84 f5       	brge	.+96     	; 0x1d8c <__vector_54+0x16a>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	99 23       	and	r25, r25
    1d32:	64 f1       	brlt	.+88     	; 0x1d8c <__vector_54+0x16a>
    1d34:	80 91 28 03 	lds	r24, 0x0328
    1d38:	90 91 29 03 	lds	r25, 0x0329
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	29 f5       	brne	.+74     	; 0x1d8c <__vector_54+0x16a>
		val_array[data_pos] = val_array[data_pos]*10 + i;
    1d42:	40 91 ee 0e 	lds	r20, 0x0EEE
    1d46:	50 91 ef 0e 	lds	r21, 0x0EEF
    1d4a:	80 91 ee 0e 	lds	r24, 0x0EEE
    1d4e:	90 91 ef 0e 	lds	r25, 0x0EEF
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	fc 01       	movw	r30, r24
    1d58:	e8 5e       	subi	r30, 0xE8	; 232
    1d5a:	f8 4f       	sbci	r31, 0xF8	; 248
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	9c 01       	movw	r18, r24
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	c9 01       	movw	r24, r18
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	28 0f       	add	r18, r24
    1d72:	39 1f       	adc	r19, r25
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	28 0f       	add	r18, r24
    1d7a:	39 1f       	adc	r19, r25
    1d7c:	ca 01       	movw	r24, r20
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	fc 01       	movw	r30, r24
    1d84:	e8 5e       	subi	r30, 0xE8	; 232
    1d86:	f8 4f       	sbci	r31, 0xF8	; 248
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	20 83       	st	Z, r18
	}
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	5f 91       	pop	r21
    1da0:	4f 91       	pop	r20
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	00 92 5b 00 	sts	0x005B, r0
    1dac:	0f 90       	pop	r0
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	0f 90       	pop	r0
    1db2:	1f 90       	pop	r1
    1db4:	18 95       	reti

00001db6 <servo_2>:

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(float degrees)
{
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	28 97       	sbiw	r28, 0x08	; 8
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	6d 83       	std	Y+5, r22	; 0x05
    1dd0:	7e 83       	std	Y+6, r23	; 0x06
    1dd2:	8f 83       	std	Y+7, r24	; 0x07
    1dd4:	98 87       	std	Y+8, r25	; 0x08
	float PositionTiltServo = 0;
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	ab 83       	std	Y+3, r26	; 0x03
    1de4:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	2b e7       	ldi	r18, 0x7B	; 123
    1df0:	34 e1       	ldi	r19, 0x14	; 20
    1df2:	4e ee       	ldi	r20, 0xEE	; 238
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 b6 14 	call	0x296c	; 0x296c <__divsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4c e0       	ldi	r20, 0x0C	; 12
    1e08:	52 e4       	ldi	r21, 0x42	; 66
    1e0a:	0e 94 8f 13 	call	0x271e	; 0x271e <__addsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	ab 83       	std	Y+3, r26	; 0x03
    1e18:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    1e1a:	eb e8       	ldi	r30, 0x8B	; 139
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1e20:	0a e8       	ldi	r16, 0x8A	; 138
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	69 81       	ldd	r22, Y+1	; 0x01
    1e26:	7a 81       	ldd	r23, Y+2	; 0x02
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 83       	st	Z, r24
}
    1e38:	28 96       	adiw	r28, 0x08	; 8
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <servo_2_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.


void servo_2_free (void) //makes servo 2 free rotating
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    1e56:	eb e8       	ldi	r30, 0x8B	; 139
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Servo 2 off
    1e5e:	ea e8       	ldi	r30, 0x8A	; 138
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	80 83       	st	Z, r24
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <pen_up>:

void pen_up(void)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	60 97       	sbiw	r28, 0x10	; 16
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
	int degree = 50;
    1e80:	82 e3       	ldi	r24, 0x32	; 50
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	98 8b       	std	Y+16, r25	; 0x10
    1e86:	8f 87       	std	Y+15, r24	; 0x0f
	servo_2(degree);
    1e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8a:	98 89       	ldd	r25, Y+16	; 0x10
    1e8c:	aa 27       	eor	r26, r26
    1e8e:	97 fd       	sbrc	r25, 7
    1e90:	a0 95       	com	r26
    1e92:	ba 2f       	mov	r27, r26
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__floatsisf>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <servo_2>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	aa ef       	ldi	r26, 0xFA	; 250
    1eae:	b4 e4       	ldi	r27, 0x44	; 68
    1eb0:	8b 87       	std	Y+11, r24	; 0x0b
    1eb2:	9c 87       	std	Y+12, r25	; 0x0c
    1eb4:	ad 87       	std	Y+13, r26	; 0x0d
    1eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	2d ec       	ldi	r18, 0xCD	; 205
    1ec2:	3c ec       	ldi	r19, 0xCC	; 204
    1ec4:	4c e2       	ldi	r20, 0x2C	; 44
    1ec6:	55 e4       	ldi	r21, 0x45	; 69
    1ec8:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	98 87       	std	Y+8, r25	; 0x08
    1ed4:	a9 87       	std	Y+9, r26	; 0x09
    1ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <pen_up+0x8e>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <pen_up+0x10c>
	else if (__tmp > 65535)
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <pen_up+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <pen_up+0xee>
    1f3c:	84 e1       	ldi	r24, 0x14	; 20
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <pen_up+0xdc>
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <pen_up+0xd0>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <pen_up+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <pen_up+0x118>
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_2_free();
    1f8c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <servo_2_free>
}
    1f90:	60 96       	adiw	r28, 0x10	; 16
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <pen_down>:

void pen_down(void)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	60 97       	sbiw	r28, 0x10	; 16
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
	int degree = 92;
    1fb6:	8c e5       	ldi	r24, 0x5C	; 92
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
	servo_2(93);
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	8a eb       	ldi	r24, 0xBA	; 186
    1fc4:	92 e4       	ldi	r25, 0x42	; 66
    1fc6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <servo_2>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	aa ef       	ldi	r26, 0xFA	; 250
    1fd0:	b4 e4       	ldi	r27, 0x44	; 68
    1fd2:	8b 87       	std	Y+11, r24	; 0x0b
    1fd4:	9c 87       	std	Y+12, r25	; 0x0c
    1fd6:	ad 87       	std	Y+13, r26	; 0x0d
    1fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe2:	2d ec       	ldi	r18, 0xCD	; 205
    1fe4:	3c ec       	ldi	r19, 0xCC	; 204
    1fe6:	4c e2       	ldi	r20, 0x2C	; 44
    1fe8:	55 e4       	ldi	r21, 0x45	; 69
    1fea:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8f 83       	std	Y+7, r24	; 0x07
    1ff4:	98 87       	std	Y+8, r25	; 0x08
    1ff6:	a9 87       	std	Y+9, r26	; 0x09
    1ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <pen_down+0x7a>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	3f c0       	rjmp	.+126    	; 0x209a <pen_down+0xf8>
	else if (__tmp > 65535)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <pen_down+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	0f c0       	rjmp	.+30     	; 0x207c <pen_down+0xda>
    205e:	84 e1       	ldi	r24, 0x14	; 20
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <pen_down+0xc8>
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <pen_down+0xbc>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <pen_down+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <pen_down+0x104>
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_2_free();
    20ae:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <servo_2_free>
}
    20b2:	60 96       	adiw	r28, 0x10	; 16
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <port_init>:

//Initialize the ports
void port_init(void)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    20cc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <servo2_pin_config>
 	buzzer_pin_config();
    20d0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <buzzer_pin_config>
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <init_devices>:

void init_devices(void)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
	cli(); //disable all interrupts
    20e2:	f8 94       	cli
	port_init();
    20e4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <port_init>
	timer1_init();
    20e8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <timer1_init>
	lcd_init();
    20ec:	0e 94 af 08 	call	0x115e	; 0x115e <lcd_init>
	uart3_init();
    20f0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <uart3_init>
	motion_port_init();
    20f4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <motion_port_init>
	sei(); //re-enable interrupts
    20f8:	78 94       	sei
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <main>:

//Main function
void main(void)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	60 97       	sbiw	r28, 0x10	; 16
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    2114:	0e 94 6d 10 	call	0x20da	; 0x20da <init_devices>

	data_pos = 0;
    2118:	10 92 ef 0e 	sts	0x0EEF, r1
    211c:	10 92 ee 0e 	sts	0x0EEE, r1
	bot_pos = 0;
    2120:	10 92 ed 0e 	sts	0x0EED, r1
    2124:	10 92 ec 0e 	sts	0x0EEC, r1

	int i;

	for(i=0;i<1000;i++){
    2128:	18 8a       	std	Y+16, r1	; 0x10
    212a:	1f 86       	std	Y+15, r1	; 0x0f
    212c:	0e c0       	rjmp	.+28     	; 0x214a <main+0x4a>
		val_array[i] = 0;
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	fc 01       	movw	r30, r24
    2138:	e8 5e       	subi	r30, 0xE8	; 232
    213a:	f8 4f       	sbci	r31, 0xF8	; 248
    213c:	11 82       	std	Z+1, r1	; 0x01
    213e:	10 82       	st	Z, r1
	data_pos = 0;
	bot_pos = 0;

	int i;

	for(i=0;i<1000;i++){
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	98 89       	ldd	r25, Y+16	; 0x10
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	98 8b       	std	Y+16, r25	; 0x10
    2148:	8f 87       	std	Y+15, r24	; 0x0f
    214a:	8f 85       	ldd	r24, Y+15	; 0x0f
    214c:	98 89       	ldd	r25, Y+16	; 0x10
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	88 3e       	cpi	r24, 0xE8	; 232
    2152:	92 07       	cpc	r25, r18
    2154:	64 f3       	brlt	.-40     	; 0x212e <main+0x2e>

//	mov_array[1] = 'F'; mov_array[2] = 'R'; mov_array[3] = 'F';	mov_array[4] = 'L'; mov_array[5] = 'B'; 
//	val_array[1] = 100; val_array[2] = 90; val_array[3] = 200;	val_array[4] = 40; val_array[5] = 150;

	//LCD_Reset_4bit();
	lcd_cursor(2,1);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	0e 94 22 0c 	call	0x1844	; 0x1844 <lcd_cursor>
	lcd_string("DRAWOID");
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
	while(1){
		//lcd_print(1,9,val_array[bot_pos],3);
		
		if (bot_pos < data_pos){
    2166:	20 91 ec 0e 	lds	r18, 0x0EEC
    216a:	30 91 ed 0e 	lds	r19, 0x0EED
    216e:	80 91 ee 0e 	lds	r24, 0x0EEE
    2172:	90 91 ef 0e 	lds	r25, 0x0EEF
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	ac f7       	brge	.-22     	; 0x2166 <main+0x66>
			lcd_print(1,9,val_array[bot_pos],3);
    217c:	80 91 ec 0e 	lds	r24, 0x0EEC
    2180:	90 91 ed 0e 	lds	r25, 0x0EED
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	fc 01       	movw	r30, r24
    218a:	e8 5e       	subi	r30, 0xE8	; 232
    218c:	f8 4f       	sbci	r31, 0xF8	; 248
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	9c 01       	movw	r18, r24
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	69 e0       	ldi	r22, 0x09	; 9
    2198:	a9 01       	movw	r20, r18
    219a:	23 e0       	ldi	r18, 0x03	; 3
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <lcd_print>
			lcd_cursor(1,1);
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	0e 94 22 0c 	call	0x1844	; 0x1844 <lcd_cursor>
			if (mov_array[bot_pos] == 'F'){
    21aa:	80 91 ec 0e 	lds	r24, 0x0EEC
    21ae:	90 91 ed 0e 	lds	r25, 0x0EED
    21b2:	fc 01       	movw	r30, r24
    21b4:	e4 5d       	subi	r30, 0xD4	; 212
    21b6:	fc 4f       	sbci	r31, 0xFC	; 252
    21b8:	80 81       	ld	r24, Z
    21ba:	86 34       	cpi	r24, 0x46	; 70
    21bc:	a1 f4       	brne	.+40     	; 0x21e6 <main+0xe6>
				lcd_string("F");
    21be:	8a e0       	ldi	r24, 0x0A	; 10
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				move_straight(val_array[bot_pos],1);
    21c6:	80 91 ec 0e 	lds	r24, 0x0EEC
    21ca:	90 91 ed 0e 	lds	r25, 0x0EED
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	fc 01       	movw	r30, r24
    21d4:	e8 5e       	subi	r30, 0xE8	; 232
    21d6:	f8 4f       	sbci	r31, 0xF8	; 248
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	61 e0       	ldi	r22, 0x01	; 1
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <move_straight>
    21e4:	77 c0       	rjmp	.+238    	; 0x22d4 <__stack+0xd5>
			}
			else if (mov_array[bot_pos] == 'B'){
    21e6:	80 91 ec 0e 	lds	r24, 0x0EEC
    21ea:	90 91 ed 0e 	lds	r25, 0x0EED
    21ee:	fc 01       	movw	r30, r24
    21f0:	e4 5d       	subi	r30, 0xD4	; 212
    21f2:	fc 4f       	sbci	r31, 0xFC	; 252
    21f4:	80 81       	ld	r24, Z
    21f6:	82 34       	cpi	r24, 0x42	; 66
    21f8:	a1 f4       	brne	.+40     	; 0x2222 <__stack+0x23>
				lcd_string("B");
    21fa:	8c e0       	ldi	r24, 0x0C	; 12
    21fc:	92 e0       	ldi	r25, 0x02	; 2
    21fe:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				move_straight(val_array[bot_pos],0);
    2202:	80 91 ec 0e 	lds	r24, 0x0EEC
    2206:	90 91 ed 0e 	lds	r25, 0x0EED
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	fc 01       	movw	r30, r24
    2210:	e8 5e       	subi	r30, 0xE8	; 232
    2212:	f8 4f       	sbci	r31, 0xF8	; 248
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <move_straight>
    2220:	59 c0       	rjmp	.+178    	; 0x22d4 <__stack+0xd5>
			}
			else if (mov_array[bot_pos] == 'R'){
    2222:	80 91 ec 0e 	lds	r24, 0x0EEC
    2226:	90 91 ed 0e 	lds	r25, 0x0EED
    222a:	fc 01       	movw	r30, r24
    222c:	e4 5d       	subi	r30, 0xD4	; 212
    222e:	fc 4f       	sbci	r31, 0xFC	; 252
    2230:	80 81       	ld	r24, Z
    2232:	82 35       	cpi	r24, 0x52	; 82
    2234:	91 f4       	brne	.+36     	; 0x225a <__stack+0x5b>
				lcd_string("R");
    2236:	8e e0       	ldi	r24, 0x0E	; 14
    2238:	92 e0       	ldi	r25, 0x02	; 2
    223a:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				right_degrees(val_array[bot_pos]);
    223e:	80 91 ec 0e 	lds	r24, 0x0EEC
    2242:	90 91 ed 0e 	lds	r25, 0x0EED
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	fc 01       	movw	r30, r24
    224c:	e8 5e       	subi	r30, 0xE8	; 232
    224e:	f8 4f       	sbci	r31, 0xF8	; 248
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	0e 94 cf 02 	call	0x59e	; 0x59e <right_degrees>
    2258:	3d c0       	rjmp	.+122    	; 0x22d4 <__stack+0xd5>
			}
			else if (mov_array[bot_pos] == 'L'){
    225a:	80 91 ec 0e 	lds	r24, 0x0EEC
    225e:	90 91 ed 0e 	lds	r25, 0x0EED
    2262:	fc 01       	movw	r30, r24
    2264:	e4 5d       	subi	r30, 0xD4	; 212
    2266:	fc 4f       	sbci	r31, 0xFC	; 252
    2268:	80 81       	ld	r24, Z
    226a:	8c 34       	cpi	r24, 0x4C	; 76
    226c:	91 f4       	brne	.+36     	; 0x2292 <__stack+0x93>
				lcd_string("L");
    226e:	80 e1       	ldi	r24, 0x10	; 16
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				left_degrees(val_array[bot_pos]);
    2276:	80 91 ec 0e 	lds	r24, 0x0EEC
    227a:	90 91 ed 0e 	lds	r25, 0x0EED
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	fc 01       	movw	r30, r24
    2284:	e8 5e       	subi	r30, 0xE8	; 232
    2286:	f8 4f       	sbci	r31, 0xF8	; 248
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	0e 94 bc 02 	call	0x578	; 0x578 <left_degrees>
    2290:	21 c0       	rjmp	.+66     	; 0x22d4 <__stack+0xd5>
			}
			else if (mov_array[bot_pos] == 'U'){
    2292:	80 91 ec 0e 	lds	r24, 0x0EEC
    2296:	90 91 ed 0e 	lds	r25, 0x0EED
    229a:	fc 01       	movw	r30, r24
    229c:	e4 5d       	subi	r30, 0xD4	; 212
    229e:	fc 4f       	sbci	r31, 0xFC	; 252
    22a0:	80 81       	ld	r24, Z
    22a2:	85 35       	cpi	r24, 0x55	; 85
    22a4:	39 f4       	brne	.+14     	; 0x22b4 <__stack+0xb5>
				lcd_string("U");
    22a6:	82 e1       	ldi	r24, 0x12	; 18
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				pen_up();
    22ae:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <pen_up>
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <__stack+0xd5>
			}
			else if (mov_array[bot_pos] == 'D'){
    22b4:	80 91 ec 0e 	lds	r24, 0x0EEC
    22b8:	90 91 ed 0e 	lds	r25, 0x0EED
    22bc:	fc 01       	movw	r30, r24
    22be:	e4 5d       	subi	r30, 0xD4	; 212
    22c0:	fc 4f       	sbci	r31, 0xFC	; 252
    22c2:	80 81       	ld	r24, Z
    22c4:	84 34       	cpi	r24, 0x44	; 68
    22c6:	31 f4       	brne	.+12     	; 0x22d4 <__stack+0xd5>
				lcd_string("D");
    22c8:	84 e1       	ldi	r24, 0x14	; 20
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	0e 94 05 0c 	call	0x180a	; 0x180a <lcd_string>
				pen_down();
    22d0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <pen_down>
			}
			bot_pos++;
    22d4:	80 91 ec 0e 	lds	r24, 0x0EEC
    22d8:	90 91 ed 0e 	lds	r25, 0x0EED
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	90 93 ed 0e 	sts	0x0EED, r25
    22e2:	80 93 ec 0e 	sts	0x0EEC, r24
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	aa e7       	ldi	r26, 0x7A	; 122
    22ec:	b4 e4       	ldi	r27, 0x44	; 68
    22ee:	8b 87       	std	Y+11, r24	; 0x0b
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	ad 87       	std	Y+13, r26	; 0x0d
    22f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	2d ec       	ldi	r18, 0xCD	; 205
    2300:	3c ec       	ldi	r19, 0xCC	; 204
    2302:	4c e2       	ldi	r20, 0x2C	; 44
    2304:	55 e4       	ldi	r21, 0x45	; 69
    2306:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	98 87       	std	Y+8, r25	; 0x08
    2312:	a9 87       	std	Y+9, r26	; 0x09
    2314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <__stack+0x139>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <__stack+0x1b7>
	else if (__tmp > 65535)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <__stack+0x1a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 bc 13 	call	0x2778	; 0x2778 <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <__stack+0x199>
    237a:	84 e1       	ldi	r24, 0x14	; 20
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <__stack+0x187>
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <__stack+0x17b>
    23a0:	e2 ce       	rjmp	.-572    	; 0x2166 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <__stack+0x1c3>
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	cd ce       	rjmp	.-614    	; 0x2166 <main+0x66>

000023cc <__fixunssfsi>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	7b 01       	movw	r14, r22
    23d6:	8c 01       	movw	r16, r24
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	5f e4       	ldi	r21, 0x4F	; 79
    23e0:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__gesf2>
    23e4:	88 23       	and	r24, r24
    23e6:	8c f0       	brlt	.+34     	; 0x240a <__fixunssfsi+0x3e>
    23e8:	c8 01       	movw	r24, r16
    23ea:	b7 01       	movw	r22, r14
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	5f e4       	ldi	r21, 0x4F	; 79
    23f4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__subsf3>
    23f8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__fixsfsi>
    23fc:	9b 01       	movw	r18, r22
    23fe:	ac 01       	movw	r20, r24
    2400:	20 50       	subi	r18, 0x00	; 0
    2402:	30 40       	sbci	r19, 0x00	; 0
    2404:	40 40       	sbci	r20, 0x00	; 0
    2406:	50 48       	sbci	r21, 0x80	; 128
    2408:	06 c0       	rjmp	.+12     	; 0x2416 <__fixunssfsi+0x4a>
    240a:	c8 01       	movw	r24, r16
    240c:	b7 01       	movw	r22, r14
    240e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__fixsfsi>
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	b9 01       	movw	r22, r18
    2418:	ca 01       	movw	r24, r20
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	08 95       	ret

00002424 <_fpadd_parts>:
    2424:	a0 e0       	ldi	r26, 0x00	; 0
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e8 e1       	ldi	r30, 0x18	; 24
    242a:	f2 e1       	ldi	r31, 0x12	; 18
    242c:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__prologue_saves__>
    2430:	dc 01       	movw	r26, r24
    2432:	2b 01       	movw	r4, r22
    2434:	fa 01       	movw	r30, r20
    2436:	9c 91       	ld	r25, X
    2438:	92 30       	cpi	r25, 0x02	; 2
    243a:	08 f4       	brcc	.+2      	; 0x243e <_fpadd_parts+0x1a>
    243c:	39 c1       	rjmp	.+626    	; 0x26b0 <_fpadd_parts+0x28c>
    243e:	eb 01       	movw	r28, r22
    2440:	88 81       	ld	r24, Y
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	08 f4       	brcc	.+2      	; 0x2448 <_fpadd_parts+0x24>
    2446:	33 c1       	rjmp	.+614    	; 0x26ae <_fpadd_parts+0x28a>
    2448:	94 30       	cpi	r25, 0x04	; 4
    244a:	69 f4       	brne	.+26     	; 0x2466 <_fpadd_parts+0x42>
    244c:	84 30       	cpi	r24, 0x04	; 4
    244e:	09 f0       	breq	.+2      	; 0x2452 <_fpadd_parts+0x2e>
    2450:	2f c1       	rjmp	.+606    	; 0x26b0 <_fpadd_parts+0x28c>
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	9c 91       	ld	r25, X
    2456:	11 97       	sbiw	r26, 0x01	; 1
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	98 17       	cp	r25, r24
    245c:	09 f4       	brne	.+2      	; 0x2460 <_fpadd_parts+0x3c>
    245e:	28 c1       	rjmp	.+592    	; 0x26b0 <_fpadd_parts+0x28c>
    2460:	a6 e1       	ldi	r26, 0x16	; 22
    2462:	b2 e0       	ldi	r27, 0x02	; 2
    2464:	25 c1       	rjmp	.+586    	; 0x26b0 <_fpadd_parts+0x28c>
    2466:	84 30       	cpi	r24, 0x04	; 4
    2468:	09 f4       	brne	.+2      	; 0x246c <_fpadd_parts+0x48>
    246a:	21 c1       	rjmp	.+578    	; 0x26ae <_fpadd_parts+0x28a>
    246c:	82 30       	cpi	r24, 0x02	; 2
    246e:	a9 f4       	brne	.+42     	; 0x249a <_fpadd_parts+0x76>
    2470:	92 30       	cpi	r25, 0x02	; 2
    2472:	09 f0       	breq	.+2      	; 0x2476 <_fpadd_parts+0x52>
    2474:	1d c1       	rjmp	.+570    	; 0x26b0 <_fpadd_parts+0x28c>
    2476:	9a 01       	movw	r18, r20
    2478:	ad 01       	movw	r20, r26
    247a:	88 e0       	ldi	r24, 0x08	; 8
    247c:	ea 01       	movw	r28, r20
    247e:	09 90       	ld	r0, Y+
    2480:	ae 01       	movw	r20, r28
    2482:	e9 01       	movw	r28, r18
    2484:	09 92       	st	Y+, r0
    2486:	9e 01       	movw	r18, r28
    2488:	81 50       	subi	r24, 0x01	; 1
    248a:	c1 f7       	brne	.-16     	; 0x247c <_fpadd_parts+0x58>
    248c:	e2 01       	movw	r28, r4
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 91       	ld	r25, X
    2494:	89 23       	and	r24, r25
    2496:	81 83       	std	Z+1, r24	; 0x01
    2498:	08 c1       	rjmp	.+528    	; 0x26aa <_fpadd_parts+0x286>
    249a:	92 30       	cpi	r25, 0x02	; 2
    249c:	09 f4       	brne	.+2      	; 0x24a0 <_fpadd_parts+0x7c>
    249e:	07 c1       	rjmp	.+526    	; 0x26ae <_fpadd_parts+0x28a>
    24a0:	12 96       	adiw	r26, 0x02	; 2
    24a2:	2d 90       	ld	r2, X+
    24a4:	3c 90       	ld	r3, X
    24a6:	13 97       	sbiw	r26, 0x03	; 3
    24a8:	eb 01       	movw	r28, r22
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	14 96       	adiw	r26, 0x04	; 4
    24b0:	ad 90       	ld	r10, X+
    24b2:	bd 90       	ld	r11, X+
    24b4:	cd 90       	ld	r12, X+
    24b6:	dc 90       	ld	r13, X
    24b8:	17 97       	sbiw	r26, 0x07	; 7
    24ba:	ec 80       	ldd	r14, Y+4	; 0x04
    24bc:	fd 80       	ldd	r15, Y+5	; 0x05
    24be:	0e 81       	ldd	r16, Y+6	; 0x06
    24c0:	1f 81       	ldd	r17, Y+7	; 0x07
    24c2:	91 01       	movw	r18, r2
    24c4:	28 1b       	sub	r18, r24
    24c6:	39 0b       	sbc	r19, r25
    24c8:	b9 01       	movw	r22, r18
    24ca:	37 ff       	sbrs	r19, 7
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <_fpadd_parts+0xb2>
    24ce:	66 27       	eor	r22, r22
    24d0:	77 27       	eor	r23, r23
    24d2:	62 1b       	sub	r22, r18
    24d4:	73 0b       	sbc	r23, r19
    24d6:	60 32       	cpi	r22, 0x20	; 32
    24d8:	71 05       	cpc	r23, r1
    24da:	0c f0       	brlt	.+2      	; 0x24de <_fpadd_parts+0xba>
    24dc:	61 c0       	rjmp	.+194    	; 0x25a0 <_fpadd_parts+0x17c>
    24de:	12 16       	cp	r1, r18
    24e0:	13 06       	cpc	r1, r19
    24e2:	6c f5       	brge	.+90     	; 0x253e <_fpadd_parts+0x11a>
    24e4:	37 01       	movw	r6, r14
    24e6:	48 01       	movw	r8, r16
    24e8:	06 2e       	mov	r0, r22
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <_fpadd_parts+0xd0>
    24ec:	96 94       	lsr	r9
    24ee:	87 94       	ror	r8
    24f0:	77 94       	ror	r7
    24f2:	67 94       	ror	r6
    24f4:	0a 94       	dec	r0
    24f6:	d2 f7       	brpl	.-12     	; 0x24ec <_fpadd_parts+0xc8>
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	04 c0       	rjmp	.+8      	; 0x250a <_fpadd_parts+0xe6>
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	44 1f       	adc	r20, r20
    2508:	55 1f       	adc	r21, r21
    250a:	6a 95       	dec	r22
    250c:	d2 f7       	brpl	.-12     	; 0x2502 <_fpadd_parts+0xde>
    250e:	21 50       	subi	r18, 0x01	; 1
    2510:	30 40       	sbci	r19, 0x00	; 0
    2512:	40 40       	sbci	r20, 0x00	; 0
    2514:	50 40       	sbci	r21, 0x00	; 0
    2516:	2e 21       	and	r18, r14
    2518:	3f 21       	and	r19, r15
    251a:	40 23       	and	r20, r16
    251c:	51 23       	and	r21, r17
    251e:	21 15       	cp	r18, r1
    2520:	31 05       	cpc	r19, r1
    2522:	41 05       	cpc	r20, r1
    2524:	51 05       	cpc	r21, r1
    2526:	21 f0       	breq	.+8      	; 0x2530 <_fpadd_parts+0x10c>
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	79 01       	movw	r14, r18
    2532:	8a 01       	movw	r16, r20
    2534:	e6 28       	or	r14, r6
    2536:	f7 28       	or	r15, r7
    2538:	08 29       	or	r16, r8
    253a:	19 29       	or	r17, r9
    253c:	3c c0       	rjmp	.+120    	; 0x25b6 <_fpadd_parts+0x192>
    253e:	23 2b       	or	r18, r19
    2540:	d1 f1       	breq	.+116    	; 0x25b6 <_fpadd_parts+0x192>
    2542:	26 0e       	add	r2, r22
    2544:	37 1e       	adc	r3, r23
    2546:	35 01       	movw	r6, r10
    2548:	46 01       	movw	r8, r12
    254a:	06 2e       	mov	r0, r22
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <_fpadd_parts+0x132>
    254e:	96 94       	lsr	r9
    2550:	87 94       	ror	r8
    2552:	77 94       	ror	r7
    2554:	67 94       	ror	r6
    2556:	0a 94       	dec	r0
    2558:	d2 f7       	brpl	.-12     	; 0x254e <_fpadd_parts+0x12a>
    255a:	21 e0       	ldi	r18, 0x01	; 1
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	04 c0       	rjmp	.+8      	; 0x256c <_fpadd_parts+0x148>
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	44 1f       	adc	r20, r20
    256a:	55 1f       	adc	r21, r21
    256c:	6a 95       	dec	r22
    256e:	d2 f7       	brpl	.-12     	; 0x2564 <_fpadd_parts+0x140>
    2570:	21 50       	subi	r18, 0x01	; 1
    2572:	30 40       	sbci	r19, 0x00	; 0
    2574:	40 40       	sbci	r20, 0x00	; 0
    2576:	50 40       	sbci	r21, 0x00	; 0
    2578:	2a 21       	and	r18, r10
    257a:	3b 21       	and	r19, r11
    257c:	4c 21       	and	r20, r12
    257e:	5d 21       	and	r21, r13
    2580:	21 15       	cp	r18, r1
    2582:	31 05       	cpc	r19, r1
    2584:	41 05       	cpc	r20, r1
    2586:	51 05       	cpc	r21, r1
    2588:	21 f0       	breq	.+8      	; 0x2592 <_fpadd_parts+0x16e>
    258a:	21 e0       	ldi	r18, 0x01	; 1
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	59 01       	movw	r10, r18
    2594:	6a 01       	movw	r12, r20
    2596:	a6 28       	or	r10, r6
    2598:	b7 28       	or	r11, r7
    259a:	c8 28       	or	r12, r8
    259c:	d9 28       	or	r13, r9
    259e:	0b c0       	rjmp	.+22     	; 0x25b6 <_fpadd_parts+0x192>
    25a0:	82 15       	cp	r24, r2
    25a2:	93 05       	cpc	r25, r3
    25a4:	2c f0       	brlt	.+10     	; 0x25b0 <_fpadd_parts+0x18c>
    25a6:	1c 01       	movw	r2, r24
    25a8:	aa 24       	eor	r10, r10
    25aa:	bb 24       	eor	r11, r11
    25ac:	65 01       	movw	r12, r10
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <_fpadd_parts+0x192>
    25b0:	ee 24       	eor	r14, r14
    25b2:	ff 24       	eor	r15, r15
    25b4:	87 01       	movw	r16, r14
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 91       	ld	r25, X
    25ba:	d2 01       	movw	r26, r4
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	8c 91       	ld	r24, X
    25c0:	98 17       	cp	r25, r24
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <_fpadd_parts+0x1a2>
    25c4:	45 c0       	rjmp	.+138    	; 0x2650 <_fpadd_parts+0x22c>
    25c6:	99 23       	and	r25, r25
    25c8:	39 f0       	breq	.+14     	; 0x25d8 <_fpadd_parts+0x1b4>
    25ca:	a8 01       	movw	r20, r16
    25cc:	97 01       	movw	r18, r14
    25ce:	2a 19       	sub	r18, r10
    25d0:	3b 09       	sbc	r19, r11
    25d2:	4c 09       	sbc	r20, r12
    25d4:	5d 09       	sbc	r21, r13
    25d6:	06 c0       	rjmp	.+12     	; 0x25e4 <_fpadd_parts+0x1c0>
    25d8:	a6 01       	movw	r20, r12
    25da:	95 01       	movw	r18, r10
    25dc:	2e 19       	sub	r18, r14
    25de:	3f 09       	sbc	r19, r15
    25e0:	40 0b       	sbc	r20, r16
    25e2:	51 0b       	sbc	r21, r17
    25e4:	57 fd       	sbrc	r21, 7
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <_fpadd_parts+0x1d4>
    25e8:	11 82       	std	Z+1, r1	; 0x01
    25ea:	33 82       	std	Z+3, r3	; 0x03
    25ec:	22 82       	std	Z+2, r2	; 0x02
    25ee:	24 83       	std	Z+4, r18	; 0x04
    25f0:	35 83       	std	Z+5, r19	; 0x05
    25f2:	46 83       	std	Z+6, r20	; 0x06
    25f4:	57 83       	std	Z+7, r21	; 0x07
    25f6:	1d c0       	rjmp	.+58     	; 0x2632 <_fpadd_parts+0x20e>
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	81 83       	std	Z+1, r24	; 0x01
    25fc:	33 82       	std	Z+3, r3	; 0x03
    25fe:	22 82       	std	Z+2, r2	; 0x02
    2600:	88 27       	eor	r24, r24
    2602:	99 27       	eor	r25, r25
    2604:	dc 01       	movw	r26, r24
    2606:	82 1b       	sub	r24, r18
    2608:	93 0b       	sbc	r25, r19
    260a:	a4 0b       	sbc	r26, r20
    260c:	b5 0b       	sbc	r27, r21
    260e:	84 83       	std	Z+4, r24	; 0x04
    2610:	95 83       	std	Z+5, r25	; 0x05
    2612:	a6 83       	std	Z+6, r26	; 0x06
    2614:	b7 83       	std	Z+7, r27	; 0x07
    2616:	0d c0       	rjmp	.+26     	; 0x2632 <_fpadd_parts+0x20e>
    2618:	22 0f       	add	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	44 1f       	adc	r20, r20
    261e:	55 1f       	adc	r21, r21
    2620:	24 83       	std	Z+4, r18	; 0x04
    2622:	35 83       	std	Z+5, r19	; 0x05
    2624:	46 83       	std	Z+6, r20	; 0x06
    2626:	57 83       	std	Z+7, r21	; 0x07
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	93 83       	std	Z+3, r25	; 0x03
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	24 81       	ldd	r18, Z+4	; 0x04
    2634:	35 81       	ldd	r19, Z+5	; 0x05
    2636:	46 81       	ldd	r20, Z+6	; 0x06
    2638:	57 81       	ldd	r21, Z+7	; 0x07
    263a:	da 01       	movw	r26, r20
    263c:	c9 01       	movw	r24, r18
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	a1 09       	sbc	r26, r1
    2642:	b1 09       	sbc	r27, r1
    2644:	8f 5f       	subi	r24, 0xFF	; 255
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	af 4f       	sbci	r26, 0xFF	; 255
    264a:	bf 43       	sbci	r27, 0x3F	; 63
    264c:	28 f3       	brcs	.-54     	; 0x2618 <_fpadd_parts+0x1f4>
    264e:	0b c0       	rjmp	.+22     	; 0x2666 <_fpadd_parts+0x242>
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	33 82       	std	Z+3, r3	; 0x03
    2654:	22 82       	std	Z+2, r2	; 0x02
    2656:	ea 0c       	add	r14, r10
    2658:	fb 1c       	adc	r15, r11
    265a:	0c 1d       	adc	r16, r12
    265c:	1d 1d       	adc	r17, r13
    265e:	e4 82       	std	Z+4, r14	; 0x04
    2660:	f5 82       	std	Z+5, r15	; 0x05
    2662:	06 83       	std	Z+6, r16	; 0x06
    2664:	17 83       	std	Z+7, r17	; 0x07
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	80 83       	st	Z, r24
    266a:	24 81       	ldd	r18, Z+4	; 0x04
    266c:	35 81       	ldd	r19, Z+5	; 0x05
    266e:	46 81       	ldd	r20, Z+6	; 0x06
    2670:	57 81       	ldd	r21, Z+7	; 0x07
    2672:	57 ff       	sbrs	r21, 7
    2674:	1a c0       	rjmp	.+52     	; 0x26aa <_fpadd_parts+0x286>
    2676:	c9 01       	movw	r24, r18
    2678:	aa 27       	eor	r26, r26
    267a:	97 fd       	sbrc	r25, 7
    267c:	a0 95       	com	r26
    267e:	ba 2f       	mov	r27, r26
    2680:	81 70       	andi	r24, 0x01	; 1
    2682:	90 70       	andi	r25, 0x00	; 0
    2684:	a0 70       	andi	r26, 0x00	; 0
    2686:	b0 70       	andi	r27, 0x00	; 0
    2688:	56 95       	lsr	r21
    268a:	47 95       	ror	r20
    268c:	37 95       	ror	r19
    268e:	27 95       	ror	r18
    2690:	82 2b       	or	r24, r18
    2692:	93 2b       	or	r25, r19
    2694:	a4 2b       	or	r26, r20
    2696:	b5 2b       	or	r27, r21
    2698:	84 83       	std	Z+4, r24	; 0x04
    269a:	95 83       	std	Z+5, r25	; 0x05
    269c:	a6 83       	std	Z+6, r26	; 0x06
    269e:	b7 83       	std	Z+7, r27	; 0x07
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	93 83       	std	Z+3, r25	; 0x03
    26a8:	82 83       	std	Z+2, r24	; 0x02
    26aa:	df 01       	movw	r26, r30
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <_fpadd_parts+0x28c>
    26ae:	d2 01       	movw	r26, r4
    26b0:	cd 01       	movw	r24, r26
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	e2 e1       	ldi	r30, 0x12	; 18
    26b8:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__epilogue_restores__>

000026bc <__subsf3>:
    26bc:	a0 e2       	ldi	r26, 0x20	; 32
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e4 e6       	ldi	r30, 0x64	; 100
    26c2:	f3 e1       	ldi	r31, 0x13	; 19
    26c4:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x18>
    26c8:	69 83       	std	Y+1, r22	; 0x01
    26ca:	7a 83       	std	Y+2, r23	; 0x02
    26cc:	8b 83       	std	Y+3, r24	; 0x03
    26ce:	9c 83       	std	Y+4, r25	; 0x04
    26d0:	2d 83       	std	Y+5, r18	; 0x05
    26d2:	3e 83       	std	Y+6, r19	; 0x06
    26d4:	4f 83       	std	Y+7, r20	; 0x07
    26d6:	58 87       	std	Y+8, r21	; 0x08
    26d8:	e9 e0       	ldi	r30, 0x09	; 9
    26da:	ee 2e       	mov	r14, r30
    26dc:	f1 2c       	mov	r15, r1
    26de:	ec 0e       	add	r14, r28
    26e0:	fd 1e       	adc	r15, r29
    26e2:	ce 01       	movw	r24, r28
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	b7 01       	movw	r22, r14
    26e8:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    26ec:	8e 01       	movw	r16, r28
    26ee:	0f 5e       	subi	r16, 0xEF	; 239
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	ce 01       	movw	r24, r28
    26f4:	05 96       	adiw	r24, 0x05	; 5
    26f6:	b8 01       	movw	r22, r16
    26f8:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    26fc:	8a 89       	ldd	r24, Y+18	; 0x12
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	89 27       	eor	r24, r25
    2702:	8a 8b       	std	Y+18, r24	; 0x12
    2704:	c7 01       	movw	r24, r14
    2706:	b8 01       	movw	r22, r16
    2708:	ae 01       	movw	r20, r28
    270a:	47 5e       	subi	r20, 0xE7	; 231
    270c:	5f 4f       	sbci	r21, 0xFF	; 255
    270e:	0e 94 12 12 	call	0x2424	; 0x2424 <_fpadd_parts>
    2712:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2716:	a0 96       	adiw	r28, 0x20	; 32
    2718:	e6 e0       	ldi	r30, 0x06	; 6
    271a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x18>

0000271e <__addsf3>:
    271e:	a0 e2       	ldi	r26, 0x20	; 32
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e5 e9       	ldi	r30, 0x95	; 149
    2724:	f3 e1       	ldi	r31, 0x13	; 19
    2726:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x18>
    272a:	69 83       	std	Y+1, r22	; 0x01
    272c:	7a 83       	std	Y+2, r23	; 0x02
    272e:	8b 83       	std	Y+3, r24	; 0x03
    2730:	9c 83       	std	Y+4, r25	; 0x04
    2732:	2d 83       	std	Y+5, r18	; 0x05
    2734:	3e 83       	std	Y+6, r19	; 0x06
    2736:	4f 83       	std	Y+7, r20	; 0x07
    2738:	58 87       	std	Y+8, r21	; 0x08
    273a:	f9 e0       	ldi	r31, 0x09	; 9
    273c:	ef 2e       	mov	r14, r31
    273e:	f1 2c       	mov	r15, r1
    2740:	ec 0e       	add	r14, r28
    2742:	fd 1e       	adc	r15, r29
    2744:	ce 01       	movw	r24, r28
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	b7 01       	movw	r22, r14
    274a:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    274e:	8e 01       	movw	r16, r28
    2750:	0f 5e       	subi	r16, 0xEF	; 239
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	ce 01       	movw	r24, r28
    2756:	05 96       	adiw	r24, 0x05	; 5
    2758:	b8 01       	movw	r22, r16
    275a:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    275e:	c7 01       	movw	r24, r14
    2760:	b8 01       	movw	r22, r16
    2762:	ae 01       	movw	r20, r28
    2764:	47 5e       	subi	r20, 0xE7	; 231
    2766:	5f 4f       	sbci	r21, 0xFF	; 255
    2768:	0e 94 12 12 	call	0x2424	; 0x2424 <_fpadd_parts>
    276c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2770:	a0 96       	adiw	r28, 0x20	; 32
    2772:	e6 e0       	ldi	r30, 0x06	; 6
    2774:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x18>

00002778 <__mulsf3>:
    2778:	a0 e2       	ldi	r26, 0x20	; 32
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e2 ec       	ldi	r30, 0xC2	; 194
    277e:	f3 e1       	ldi	r31, 0x13	; 19
    2780:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__prologue_saves__>
    2784:	69 83       	std	Y+1, r22	; 0x01
    2786:	7a 83       	std	Y+2, r23	; 0x02
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	2d 83       	std	Y+5, r18	; 0x05
    278e:	3e 83       	std	Y+6, r19	; 0x06
    2790:	4f 83       	std	Y+7, r20	; 0x07
    2792:	58 87       	std	Y+8, r21	; 0x08
    2794:	ce 01       	movw	r24, r28
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	be 01       	movw	r22, r28
    279a:	67 5f       	subi	r22, 0xF7	; 247
    279c:	7f 4f       	sbci	r23, 0xFF	; 255
    279e:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    27a2:	ce 01       	movw	r24, r28
    27a4:	05 96       	adiw	r24, 0x05	; 5
    27a6:	be 01       	movw	r22, r28
    27a8:	6f 5e       	subi	r22, 0xEF	; 239
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    27b0:	99 85       	ldd	r25, Y+9	; 0x09
    27b2:	92 30       	cpi	r25, 0x02	; 2
    27b4:	88 f0       	brcs	.+34     	; 0x27d8 <__mulsf3+0x60>
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	c8 f0       	brcs	.+50     	; 0x27ee <__mulsf3+0x76>
    27bc:	94 30       	cpi	r25, 0x04	; 4
    27be:	19 f4       	brne	.+6      	; 0x27c6 <__mulsf3+0x4e>
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	51 f4       	brne	.+20     	; 0x27d8 <__mulsf3+0x60>
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <__mulsf3+0x56>
    27c6:	84 30       	cpi	r24, 0x04	; 4
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <__mulsf3+0x5c>
    27ca:	92 30       	cpi	r25, 0x02	; 2
    27cc:	81 f4       	brne	.+32     	; 0x27ee <__mulsf3+0x76>
    27ce:	86 e1       	ldi	r24, 0x16	; 22
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	c6 c0       	rjmp	.+396    	; 0x2960 <__mulsf3+0x1e8>
    27d4:	92 30       	cpi	r25, 0x02	; 2
    27d6:	49 f4       	brne	.+18     	; 0x27ea <__mulsf3+0x72>
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	8a 89       	ldd	r24, Y+18	; 0x12
    27de:	98 13       	cpse	r25, r24
    27e0:	21 e0       	ldi	r18, 0x01	; 1
    27e2:	2a 87       	std	Y+10, r18	; 0x0a
    27e4:	ce 01       	movw	r24, r28
    27e6:	09 96       	adiw	r24, 0x09	; 9
    27e8:	bb c0       	rjmp	.+374    	; 0x2960 <__mulsf3+0x1e8>
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	49 f4       	brne	.+18     	; 0x2800 <__mulsf3+0x88>
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	8a 89       	ldd	r24, Y+18	; 0x12
    27f4:	98 13       	cpse	r25, r24
    27f6:	21 e0       	ldi	r18, 0x01	; 1
    27f8:	2a 8b       	std	Y+18, r18	; 0x12
    27fa:	ce 01       	movw	r24, r28
    27fc:	41 96       	adiw	r24, 0x11	; 17
    27fe:	b0 c0       	rjmp	.+352    	; 0x2960 <__mulsf3+0x1e8>
    2800:	2d 84       	ldd	r2, Y+13	; 0x0d
    2802:	3e 84       	ldd	r3, Y+14	; 0x0e
    2804:	4f 84       	ldd	r4, Y+15	; 0x0f
    2806:	58 88       	ldd	r5, Y+16	; 0x10
    2808:	6d 88       	ldd	r6, Y+21	; 0x15
    280a:	7e 88       	ldd	r7, Y+22	; 0x16
    280c:	8f 88       	ldd	r8, Y+23	; 0x17
    280e:	98 8c       	ldd	r9, Y+24	; 0x18
    2810:	ee 24       	eor	r14, r14
    2812:	ff 24       	eor	r15, r15
    2814:	87 01       	movw	r16, r14
    2816:	aa 24       	eor	r10, r10
    2818:	bb 24       	eor	r11, r11
    281a:	65 01       	movw	r12, r10
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	e0 e0       	ldi	r30, 0x00	; 0
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	c1 01       	movw	r24, r2
    282a:	81 70       	andi	r24, 0x01	; 1
    282c:	90 70       	andi	r25, 0x00	; 0
    282e:	89 2b       	or	r24, r25
    2830:	e9 f0       	breq	.+58     	; 0x286c <__mulsf3+0xf4>
    2832:	e6 0c       	add	r14, r6
    2834:	f7 1c       	adc	r15, r7
    2836:	08 1d       	adc	r16, r8
    2838:	19 1d       	adc	r17, r9
    283a:	9a 01       	movw	r18, r20
    283c:	ab 01       	movw	r20, r22
    283e:	2a 0d       	add	r18, r10
    2840:	3b 1d       	adc	r19, r11
    2842:	4c 1d       	adc	r20, r12
    2844:	5d 1d       	adc	r21, r13
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e6 14       	cp	r14, r6
    2850:	f7 04       	cpc	r15, r7
    2852:	08 05       	cpc	r16, r8
    2854:	19 05       	cpc	r17, r9
    2856:	20 f4       	brcc	.+8      	; 0x2860 <__mulsf3+0xe8>
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e0       	ldi	r26, 0x00	; 0
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ba 01       	movw	r22, r20
    2862:	a9 01       	movw	r20, r18
    2864:	48 0f       	add	r20, r24
    2866:	59 1f       	adc	r21, r25
    2868:	6a 1f       	adc	r22, r26
    286a:	7b 1f       	adc	r23, r27
    286c:	aa 0c       	add	r10, r10
    286e:	bb 1c       	adc	r11, r11
    2870:	cc 1c       	adc	r12, r12
    2872:	dd 1c       	adc	r13, r13
    2874:	97 fe       	sbrs	r9, 7
    2876:	08 c0       	rjmp	.+16     	; 0x2888 <__mulsf3+0x110>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	a8 2a       	or	r10, r24
    2882:	b9 2a       	or	r11, r25
    2884:	ca 2a       	or	r12, r26
    2886:	db 2a       	or	r13, r27
    2888:	31 96       	adiw	r30, 0x01	; 1
    288a:	e0 32       	cpi	r30, 0x20	; 32
    288c:	f1 05       	cpc	r31, r1
    288e:	49 f0       	breq	.+18     	; 0x28a2 <__mulsf3+0x12a>
    2890:	66 0c       	add	r6, r6
    2892:	77 1c       	adc	r7, r7
    2894:	88 1c       	adc	r8, r8
    2896:	99 1c       	adc	r9, r9
    2898:	56 94       	lsr	r5
    289a:	47 94       	ror	r4
    289c:	37 94       	ror	r3
    289e:	27 94       	ror	r2
    28a0:	c3 cf       	rjmp	.-122    	; 0x2828 <__mulsf3+0xb0>
    28a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    28a4:	ea 89       	ldd	r30, Y+18	; 0x12
    28a6:	2b 89       	ldd	r18, Y+19	; 0x13
    28a8:	3c 89       	ldd	r19, Y+20	; 0x14
    28aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ae:	28 0f       	add	r18, r24
    28b0:	39 1f       	adc	r19, r25
    28b2:	2e 5f       	subi	r18, 0xFE	; 254
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	17 c0       	rjmp	.+46     	; 0x28e6 <__mulsf3+0x16e>
    28b8:	ca 01       	movw	r24, r20
    28ba:	81 70       	andi	r24, 0x01	; 1
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	89 2b       	or	r24, r25
    28c0:	61 f0       	breq	.+24     	; 0x28da <__mulsf3+0x162>
    28c2:	16 95       	lsr	r17
    28c4:	07 95       	ror	r16
    28c6:	f7 94       	ror	r15
    28c8:	e7 94       	ror	r14
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e8       	ldi	r27, 0x80	; 128
    28d2:	e8 2a       	or	r14, r24
    28d4:	f9 2a       	or	r15, r25
    28d6:	0a 2b       	or	r16, r26
    28d8:	1b 2b       	or	r17, r27
    28da:	76 95       	lsr	r23
    28dc:	67 95       	ror	r22
    28de:	57 95       	ror	r21
    28e0:	47 95       	ror	r20
    28e2:	2f 5f       	subi	r18, 0xFF	; 255
    28e4:	3f 4f       	sbci	r19, 0xFF	; 255
    28e6:	77 fd       	sbrc	r23, 7
    28e8:	e7 cf       	rjmp	.-50     	; 0x28b8 <__mulsf3+0x140>
    28ea:	0c c0       	rjmp	.+24     	; 0x2904 <__mulsf3+0x18c>
    28ec:	44 0f       	add	r20, r20
    28ee:	55 1f       	adc	r21, r21
    28f0:	66 1f       	adc	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	17 fd       	sbrc	r17, 7
    28f6:	41 60       	ori	r20, 0x01	; 1
    28f8:	ee 0c       	add	r14, r14
    28fa:	ff 1c       	adc	r15, r15
    28fc:	00 1f       	adc	r16, r16
    28fe:	11 1f       	adc	r17, r17
    2900:	21 50       	subi	r18, 0x01	; 1
    2902:	30 40       	sbci	r19, 0x00	; 0
    2904:	40 30       	cpi	r20, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	59 07       	cpc	r21, r25
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	69 07       	cpc	r22, r25
    290e:	90 e4       	ldi	r25, 0x40	; 64
    2910:	79 07       	cpc	r23, r25
    2912:	60 f3       	brcs	.-40     	; 0x28ec <__mulsf3+0x174>
    2914:	2b 8f       	std	Y+27, r18	; 0x1b
    2916:	3c 8f       	std	Y+28, r19	; 0x1c
    2918:	db 01       	movw	r26, r22
    291a:	ca 01       	movw	r24, r20
    291c:	8f 77       	andi	r24, 0x7F	; 127
    291e:	90 70       	andi	r25, 0x00	; 0
    2920:	a0 70       	andi	r26, 0x00	; 0
    2922:	b0 70       	andi	r27, 0x00	; 0
    2924:	80 34       	cpi	r24, 0x40	; 64
    2926:	91 05       	cpc	r25, r1
    2928:	a1 05       	cpc	r26, r1
    292a:	b1 05       	cpc	r27, r1
    292c:	61 f4       	brne	.+24     	; 0x2946 <__mulsf3+0x1ce>
    292e:	47 fd       	sbrc	r20, 7
    2930:	0a c0       	rjmp	.+20     	; 0x2946 <__mulsf3+0x1ce>
    2932:	e1 14       	cp	r14, r1
    2934:	f1 04       	cpc	r15, r1
    2936:	01 05       	cpc	r16, r1
    2938:	11 05       	cpc	r17, r1
    293a:	29 f0       	breq	.+10     	; 0x2946 <__mulsf3+0x1ce>
    293c:	40 5c       	subi	r20, 0xC0	; 192
    293e:	5f 4f       	sbci	r21, 0xFF	; 255
    2940:	6f 4f       	sbci	r22, 0xFF	; 255
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	40 78       	andi	r20, 0x80	; 128
    2946:	1a 8e       	std	Y+26, r1	; 0x1a
    2948:	fe 17       	cp	r31, r30
    294a:	11 f0       	breq	.+4      	; 0x2950 <__mulsf3+0x1d8>
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	8a 8f       	std	Y+26, r24	; 0x1a
    2950:	4d 8f       	std	Y+29, r20	; 0x1d
    2952:	5e 8f       	std	Y+30, r21	; 0x1e
    2954:	6f 8f       	std	Y+31, r22	; 0x1f
    2956:	78 a3       	std	Y+32, r23	; 0x20
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	89 8f       	std	Y+25, r24	; 0x19
    295c:	ce 01       	movw	r24, r28
    295e:	49 96       	adiw	r24, 0x19	; 25
    2960:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2964:	a0 96       	adiw	r28, 0x20	; 32
    2966:	e2 e1       	ldi	r30, 0x12	; 18
    2968:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__epilogue_restores__>

0000296c <__divsf3>:
    296c:	a8 e1       	ldi	r26, 0x18	; 24
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ec eb       	ldi	r30, 0xBC	; 188
    2972:	f4 e1       	ldi	r31, 0x14	; 20
    2974:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x10>
    2978:	69 83       	std	Y+1, r22	; 0x01
    297a:	7a 83       	std	Y+2, r23	; 0x02
    297c:	8b 83       	std	Y+3, r24	; 0x03
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	2d 83       	std	Y+5, r18	; 0x05
    2982:	3e 83       	std	Y+6, r19	; 0x06
    2984:	4f 83       	std	Y+7, r20	; 0x07
    2986:	58 87       	std	Y+8, r21	; 0x08
    2988:	b9 e0       	ldi	r27, 0x09	; 9
    298a:	eb 2e       	mov	r14, r27
    298c:	f1 2c       	mov	r15, r1
    298e:	ec 0e       	add	r14, r28
    2990:	fd 1e       	adc	r15, r29
    2992:	ce 01       	movw	r24, r28
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	b7 01       	movw	r22, r14
    2998:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    299c:	8e 01       	movw	r16, r28
    299e:	0f 5e       	subi	r16, 0xEF	; 239
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	ce 01       	movw	r24, r28
    29a4:	05 96       	adiw	r24, 0x05	; 5
    29a6:	b8 01       	movw	r22, r16
    29a8:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    29ac:	29 85       	ldd	r18, Y+9	; 0x09
    29ae:	22 30       	cpi	r18, 0x02	; 2
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <__divsf3+0x48>
    29b2:	7e c0       	rjmp	.+252    	; 0x2ab0 <__divsf3+0x144>
    29b4:	39 89       	ldd	r19, Y+17	; 0x11
    29b6:	32 30       	cpi	r19, 0x02	; 2
    29b8:	10 f4       	brcc	.+4      	; 0x29be <__divsf3+0x52>
    29ba:	b8 01       	movw	r22, r16
    29bc:	7c c0       	rjmp	.+248    	; 0x2ab6 <__divsf3+0x14a>
    29be:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c0:	9a 89       	ldd	r25, Y+18	; 0x12
    29c2:	89 27       	eor	r24, r25
    29c4:	8a 87       	std	Y+10, r24	; 0x0a
    29c6:	24 30       	cpi	r18, 0x04	; 4
    29c8:	11 f0       	breq	.+4      	; 0x29ce <__divsf3+0x62>
    29ca:	22 30       	cpi	r18, 0x02	; 2
    29cc:	31 f4       	brne	.+12     	; 0x29da <__divsf3+0x6e>
    29ce:	23 17       	cp	r18, r19
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <__divsf3+0x68>
    29d2:	6e c0       	rjmp	.+220    	; 0x2ab0 <__divsf3+0x144>
    29d4:	66 e1       	ldi	r22, 0x16	; 22
    29d6:	72 e0       	ldi	r23, 0x02	; 2
    29d8:	6e c0       	rjmp	.+220    	; 0x2ab6 <__divsf3+0x14a>
    29da:	34 30       	cpi	r19, 0x04	; 4
    29dc:	39 f4       	brne	.+14     	; 0x29ec <__divsf3+0x80>
    29de:	1d 86       	std	Y+13, r1	; 0x0d
    29e0:	1e 86       	std	Y+14, r1	; 0x0e
    29e2:	1f 86       	std	Y+15, r1	; 0x0f
    29e4:	18 8a       	std	Y+16, r1	; 0x10
    29e6:	1c 86       	std	Y+12, r1	; 0x0c
    29e8:	1b 86       	std	Y+11, r1	; 0x0b
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <__divsf3+0x88>
    29ec:	32 30       	cpi	r19, 0x02	; 2
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <__divsf3+0x8c>
    29f0:	84 e0       	ldi	r24, 0x04	; 4
    29f2:	89 87       	std	Y+9, r24	; 0x09
    29f4:	b7 01       	movw	r22, r14
    29f6:	5f c0       	rjmp	.+190    	; 0x2ab6 <__divsf3+0x14a>
    29f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    29fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    29fc:	8b 89       	ldd	r24, Y+19	; 0x13
    29fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2a00:	28 1b       	sub	r18, r24
    2a02:	39 0b       	sbc	r19, r25
    2a04:	3c 87       	std	Y+12, r19	; 0x0c
    2a06:	2b 87       	std	Y+11, r18	; 0x0b
    2a08:	ed 84       	ldd	r14, Y+13	; 0x0d
    2a0a:	fe 84       	ldd	r15, Y+14	; 0x0e
    2a0c:	0f 85       	ldd	r16, Y+15	; 0x0f
    2a0e:	18 89       	ldd	r17, Y+16	; 0x10
    2a10:	ad 88       	ldd	r10, Y+21	; 0x15
    2a12:	be 88       	ldd	r11, Y+22	; 0x16
    2a14:	cf 88       	ldd	r12, Y+23	; 0x17
    2a16:	d8 8c       	ldd	r13, Y+24	; 0x18
    2a18:	ea 14       	cp	r14, r10
    2a1a:	fb 04       	cpc	r15, r11
    2a1c:	0c 05       	cpc	r16, r12
    2a1e:	1d 05       	cpc	r17, r13
    2a20:	40 f4       	brcc	.+16     	; 0x2a32 <__divsf3+0xc6>
    2a22:	ee 0c       	add	r14, r14
    2a24:	ff 1c       	adc	r15, r15
    2a26:	00 1f       	adc	r16, r16
    2a28:	11 1f       	adc	r17, r17
    2a2a:	21 50       	subi	r18, 0x01	; 1
    2a2c:	30 40       	sbci	r19, 0x00	; 0
    2a2e:	3c 87       	std	Y+12, r19	; 0x0c
    2a30:	2b 87       	std	Y+11, r18	; 0x0b
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e4       	ldi	r27, 0x40	; 64
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	ea 14       	cp	r14, r10
    2a48:	fb 04       	cpc	r15, r11
    2a4a:	0c 05       	cpc	r16, r12
    2a4c:	1d 05       	cpc	r17, r13
    2a4e:	40 f0       	brcs	.+16     	; 0x2a60 <__divsf3+0xf4>
    2a50:	28 2b       	or	r18, r24
    2a52:	39 2b       	or	r19, r25
    2a54:	4a 2b       	or	r20, r26
    2a56:	5b 2b       	or	r21, r27
    2a58:	ea 18       	sub	r14, r10
    2a5a:	fb 08       	sbc	r15, r11
    2a5c:	0c 09       	sbc	r16, r12
    2a5e:	1d 09       	sbc	r17, r13
    2a60:	b6 95       	lsr	r27
    2a62:	a7 95       	ror	r26
    2a64:	97 95       	ror	r25
    2a66:	87 95       	ror	r24
    2a68:	ee 0c       	add	r14, r14
    2a6a:	ff 1c       	adc	r15, r15
    2a6c:	00 1f       	adc	r16, r16
    2a6e:	11 1f       	adc	r17, r17
    2a70:	6f 5f       	subi	r22, 0xFF	; 255
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255
    2a74:	6f 31       	cpi	r22, 0x1F	; 31
    2a76:	71 05       	cpc	r23, r1
    2a78:	31 f7       	brne	.-52     	; 0x2a46 <__divsf3+0xda>
    2a7a:	da 01       	movw	r26, r20
    2a7c:	c9 01       	movw	r24, r18
    2a7e:	8f 77       	andi	r24, 0x7F	; 127
    2a80:	90 70       	andi	r25, 0x00	; 0
    2a82:	a0 70       	andi	r26, 0x00	; 0
    2a84:	b0 70       	andi	r27, 0x00	; 0
    2a86:	80 34       	cpi	r24, 0x40	; 64
    2a88:	91 05       	cpc	r25, r1
    2a8a:	a1 05       	cpc	r26, r1
    2a8c:	b1 05       	cpc	r27, r1
    2a8e:	61 f4       	brne	.+24     	; 0x2aa8 <__divsf3+0x13c>
    2a90:	27 fd       	sbrc	r18, 7
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <__divsf3+0x13c>
    2a94:	e1 14       	cp	r14, r1
    2a96:	f1 04       	cpc	r15, r1
    2a98:	01 05       	cpc	r16, r1
    2a9a:	11 05       	cpc	r17, r1
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <__divsf3+0x13c>
    2a9e:	20 5c       	subi	r18, 0xC0	; 192
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    2aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa6:	20 78       	andi	r18, 0x80	; 128
    2aa8:	2d 87       	std	Y+13, r18	; 0x0d
    2aaa:	3e 87       	std	Y+14, r19	; 0x0e
    2aac:	4f 87       	std	Y+15, r20	; 0x0f
    2aae:	58 8b       	std	Y+16, r21	; 0x10
    2ab0:	be 01       	movw	r22, r28
    2ab2:	67 5f       	subi	r22, 0xF7	; 247
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2abc:	68 96       	adiw	r28, 0x18	; 24
    2abe:	ea e0       	ldi	r30, 0x0A	; 10
    2ac0:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x10>

00002ac4 <__gtsf2>:
    2ac4:	a8 e1       	ldi	r26, 0x18	; 24
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e8 e6       	ldi	r30, 0x68	; 104
    2aca:	f5 e1       	ldi	r31, 0x15	; 21
    2acc:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x18>
    2ad0:	69 83       	std	Y+1, r22	; 0x01
    2ad2:	7a 83       	std	Y+2, r23	; 0x02
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	2d 83       	std	Y+5, r18	; 0x05
    2ada:	3e 83       	std	Y+6, r19	; 0x06
    2adc:	4f 83       	std	Y+7, r20	; 0x07
    2ade:	58 87       	std	Y+8, r21	; 0x08
    2ae0:	89 e0       	ldi	r24, 0x09	; 9
    2ae2:	e8 2e       	mov	r14, r24
    2ae4:	f1 2c       	mov	r15, r1
    2ae6:	ec 0e       	add	r14, r28
    2ae8:	fd 1e       	adc	r15, r29
    2aea:	ce 01       	movw	r24, r28
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	b7 01       	movw	r22, r14
    2af0:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2af4:	8e 01       	movw	r16, r28
    2af6:	0f 5e       	subi	r16, 0xEF	; 239
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	ce 01       	movw	r24, r28
    2afc:	05 96       	adiw	r24, 0x05	; 5
    2afe:	b8 01       	movw	r22, r16
    2b00:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	82 30       	cpi	r24, 0x02	; 2
    2b08:	40 f0       	brcs	.+16     	; 0x2b1a <__gtsf2+0x56>
    2b0a:	89 89       	ldd	r24, Y+17	; 0x11
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	28 f0       	brcs	.+10     	; 0x2b1a <__gtsf2+0x56>
    2b10:	c7 01       	movw	r24, r14
    2b12:	b8 01       	movw	r22, r16
    2b14:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fpcmp_parts_f>
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <__gtsf2+0x58>
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	68 96       	adiw	r28, 0x18	; 24
    2b1e:	e6 e0       	ldi	r30, 0x06	; 6
    2b20:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x18>

00002b24 <__gesf2>:
    2b24:	a8 e1       	ldi	r26, 0x18	; 24
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e8 e9       	ldi	r30, 0x98	; 152
    2b2a:	f5 e1       	ldi	r31, 0x15	; 21
    2b2c:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x18>
    2b30:	69 83       	std	Y+1, r22	; 0x01
    2b32:	7a 83       	std	Y+2, r23	; 0x02
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	2d 83       	std	Y+5, r18	; 0x05
    2b3a:	3e 83       	std	Y+6, r19	; 0x06
    2b3c:	4f 83       	std	Y+7, r20	; 0x07
    2b3e:	58 87       	std	Y+8, r21	; 0x08
    2b40:	89 e0       	ldi	r24, 0x09	; 9
    2b42:	e8 2e       	mov	r14, r24
    2b44:	f1 2c       	mov	r15, r1
    2b46:	ec 0e       	add	r14, r28
    2b48:	fd 1e       	adc	r15, r29
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	b7 01       	movw	r22, r14
    2b50:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2b54:	8e 01       	movw	r16, r28
    2b56:	0f 5e       	subi	r16, 0xEF	; 239
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	05 96       	adiw	r24, 0x05	; 5
    2b5e:	b8 01       	movw	r22, r16
    2b60:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	82 30       	cpi	r24, 0x02	; 2
    2b68:	40 f0       	brcs	.+16     	; 0x2b7a <__gesf2+0x56>
    2b6a:	89 89       	ldd	r24, Y+17	; 0x11
    2b6c:	82 30       	cpi	r24, 0x02	; 2
    2b6e:	28 f0       	brcs	.+10     	; 0x2b7a <__gesf2+0x56>
    2b70:	c7 01       	movw	r24, r14
    2b72:	b8 01       	movw	r22, r16
    2b74:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fpcmp_parts_f>
    2b78:	01 c0       	rjmp	.+2      	; 0x2b7c <__gesf2+0x58>
    2b7a:	8f ef       	ldi	r24, 0xFF	; 255
    2b7c:	68 96       	adiw	r28, 0x18	; 24
    2b7e:	e6 e0       	ldi	r30, 0x06	; 6
    2b80:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x18>

00002b84 <__ltsf2>:
    2b84:	a8 e1       	ldi	r26, 0x18	; 24
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e8 ec       	ldi	r30, 0xC8	; 200
    2b8a:	f5 e1       	ldi	r31, 0x15	; 21
    2b8c:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x18>
    2b90:	69 83       	std	Y+1, r22	; 0x01
    2b92:	7a 83       	std	Y+2, r23	; 0x02
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	2d 83       	std	Y+5, r18	; 0x05
    2b9a:	3e 83       	std	Y+6, r19	; 0x06
    2b9c:	4f 83       	std	Y+7, r20	; 0x07
    2b9e:	58 87       	std	Y+8, r21	; 0x08
    2ba0:	89 e0       	ldi	r24, 0x09	; 9
    2ba2:	e8 2e       	mov	r14, r24
    2ba4:	f1 2c       	mov	r15, r1
    2ba6:	ec 0e       	add	r14, r28
    2ba8:	fd 1e       	adc	r15, r29
    2baa:	ce 01       	movw	r24, r28
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	b7 01       	movw	r22, r14
    2bb0:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2bb4:	8e 01       	movw	r16, r28
    2bb6:	0f 5e       	subi	r16, 0xEF	; 239
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	ce 01       	movw	r24, r28
    2bbc:	05 96       	adiw	r24, 0x05	; 5
    2bbe:	b8 01       	movw	r22, r16
    2bc0:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	82 30       	cpi	r24, 0x02	; 2
    2bc8:	40 f0       	brcs	.+16     	; 0x2bda <__ltsf2+0x56>
    2bca:	89 89       	ldd	r24, Y+17	; 0x11
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	28 f0       	brcs	.+10     	; 0x2bda <__ltsf2+0x56>
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	b8 01       	movw	r22, r16
    2bd4:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fpcmp_parts_f>
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <__ltsf2+0x58>
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	68 96       	adiw	r28, 0x18	; 24
    2bde:	e6 e0       	ldi	r30, 0x06	; 6
    2be0:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x18>

00002be4 <__floatsisf>:
    2be4:	a8 e0       	ldi	r26, 0x08	; 8
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e8 ef       	ldi	r30, 0xF8	; 248
    2bea:	f5 e1       	ldi	r31, 0x15	; 21
    2bec:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__prologue_saves__+0x12>
    2bf0:	9b 01       	movw	r18, r22
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	83 e0       	ldi	r24, 0x03	; 3
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	da 01       	movw	r26, r20
    2bfa:	c9 01       	movw	r24, r18
    2bfc:	88 27       	eor	r24, r24
    2bfe:	b7 fd       	sbrc	r27, 7
    2c00:	83 95       	inc	r24
    2c02:	99 27       	eor	r25, r25
    2c04:	aa 27       	eor	r26, r26
    2c06:	bb 27       	eor	r27, r27
    2c08:	b8 2e       	mov	r11, r24
    2c0a:	21 15       	cp	r18, r1
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	41 05       	cpc	r20, r1
    2c10:	51 05       	cpc	r21, r1
    2c12:	19 f4       	brne	.+6      	; 0x2c1a <__floatsisf+0x36>
    2c14:	82 e0       	ldi	r24, 0x02	; 2
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	3a c0       	rjmp	.+116    	; 0x2c8e <__floatsisf+0xaa>
    2c1a:	88 23       	and	r24, r24
    2c1c:	a9 f0       	breq	.+42     	; 0x2c48 <__floatsisf+0x64>
    2c1e:	20 30       	cpi	r18, 0x00	; 0
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	38 07       	cpc	r19, r24
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	48 07       	cpc	r20, r24
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	58 07       	cpc	r21, r24
    2c2c:	29 f4       	brne	.+10     	; 0x2c38 <__floatsisf+0x54>
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	9f ec       	ldi	r25, 0xCF	; 207
    2c36:	30 c0       	rjmp	.+96     	; 0x2c98 <__floatsisf+0xb4>
    2c38:	ee 24       	eor	r14, r14
    2c3a:	ff 24       	eor	r15, r15
    2c3c:	87 01       	movw	r16, r14
    2c3e:	e2 1a       	sub	r14, r18
    2c40:	f3 0a       	sbc	r15, r19
    2c42:	04 0b       	sbc	r16, r20
    2c44:	15 0b       	sbc	r17, r21
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <__floatsisf+0x68>
    2c48:	79 01       	movw	r14, r18
    2c4a:	8a 01       	movw	r16, r20
    2c4c:	8e e1       	ldi	r24, 0x1E	; 30
    2c4e:	c8 2e       	mov	r12, r24
    2c50:	d1 2c       	mov	r13, r1
    2c52:	dc 82       	std	Y+4, r13	; 0x04
    2c54:	cb 82       	std	Y+3, r12	; 0x03
    2c56:	ed 82       	std	Y+5, r14	; 0x05
    2c58:	fe 82       	std	Y+6, r15	; 0x06
    2c5a:	0f 83       	std	Y+7, r16	; 0x07
    2c5c:	18 87       	std	Y+8, r17	; 0x08
    2c5e:	c8 01       	movw	r24, r16
    2c60:	b7 01       	movw	r22, r14
    2c62:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__clzsi2>
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	18 16       	cp	r1, r24
    2c6a:	19 06       	cpc	r1, r25
    2c6c:	84 f4       	brge	.+32     	; 0x2c8e <__floatsisf+0xaa>
    2c6e:	08 2e       	mov	r0, r24
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <__floatsisf+0x96>
    2c72:	ee 0c       	add	r14, r14
    2c74:	ff 1c       	adc	r15, r15
    2c76:	00 1f       	adc	r16, r16
    2c78:	11 1f       	adc	r17, r17
    2c7a:	0a 94       	dec	r0
    2c7c:	d2 f7       	brpl	.-12     	; 0x2c72 <__floatsisf+0x8e>
    2c7e:	ed 82       	std	Y+5, r14	; 0x05
    2c80:	fe 82       	std	Y+6, r15	; 0x06
    2c82:	0f 83       	std	Y+7, r16	; 0x07
    2c84:	18 87       	std	Y+8, r17	; 0x08
    2c86:	c8 1a       	sub	r12, r24
    2c88:	d9 0a       	sbc	r13, r25
    2c8a:	dc 82       	std	Y+4, r13	; 0x04
    2c8c:	cb 82       	std	Y+3, r12	; 0x03
    2c8e:	ba 82       	std	Y+2, r11	; 0x02
    2c90:	ce 01       	movw	r24, r28
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2c98:	28 96       	adiw	r28, 0x08	; 8
    2c9a:	e9 e0       	ldi	r30, 0x09	; 9
    2c9c:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__epilogue_restores__+0x12>

00002ca0 <__fixsfsi>:
    2ca0:	ac e0       	ldi	r26, 0x0C	; 12
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e6 e5       	ldi	r30, 0x56	; 86
    2ca6:	f6 e1       	ldi	r31, 0x16	; 22
    2ca8:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x20>
    2cac:	69 83       	std	Y+1, r22	; 0x01
    2cae:	7a 83       	std	Y+2, r23	; 0x02
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	be 01       	movw	r22, r28
    2cba:	6b 5f       	subi	r22, 0xFB	; 251
    2cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbe:	0e 94 41 18 	call	0x3082	; 0x3082 <__unpack_f>
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	82 30       	cpi	r24, 0x02	; 2
    2cc6:	61 f1       	breq	.+88     	; 0x2d20 <__fixsfsi+0x80>
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	50 f1       	brcs	.+84     	; 0x2d20 <__fixsfsi+0x80>
    2ccc:	84 30       	cpi	r24, 0x04	; 4
    2cce:	21 f4       	brne	.+8      	; 0x2cd8 <__fixsfsi+0x38>
    2cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd2:	88 23       	and	r24, r24
    2cd4:	51 f1       	breq	.+84     	; 0x2d2a <__fixsfsi+0x8a>
    2cd6:	2e c0       	rjmp	.+92     	; 0x2d34 <__fixsfsi+0x94>
    2cd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2cda:	38 85       	ldd	r19, Y+8	; 0x08
    2cdc:	37 fd       	sbrc	r19, 7
    2cde:	20 c0       	rjmp	.+64     	; 0x2d20 <__fixsfsi+0x80>
    2ce0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ce2:	2f 31       	cpi	r18, 0x1F	; 31
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	1c f0       	brlt	.+6      	; 0x2cee <__fixsfsi+0x4e>
    2ce8:	66 23       	and	r22, r22
    2cea:	f9 f0       	breq	.+62     	; 0x2d2a <__fixsfsi+0x8a>
    2cec:	23 c0       	rjmp	.+70     	; 0x2d34 <__fixsfsi+0x94>
    2cee:	8e e1       	ldi	r24, 0x1E	; 30
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	82 1b       	sub	r24, r18
    2cf4:	93 0b       	sbc	r25, r19
    2cf6:	29 85       	ldd	r18, Y+9	; 0x09
    2cf8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cfa:	4b 85       	ldd	r20, Y+11	; 0x0b
    2cfc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2cfe:	04 c0       	rjmp	.+8      	; 0x2d08 <__fixsfsi+0x68>
    2d00:	56 95       	lsr	r21
    2d02:	47 95       	ror	r20
    2d04:	37 95       	ror	r19
    2d06:	27 95       	ror	r18
    2d08:	8a 95       	dec	r24
    2d0a:	d2 f7       	brpl	.-12     	; 0x2d00 <__fixsfsi+0x60>
    2d0c:	66 23       	and	r22, r22
    2d0e:	b1 f0       	breq	.+44     	; 0x2d3c <__fixsfsi+0x9c>
    2d10:	50 95       	com	r21
    2d12:	40 95       	com	r20
    2d14:	30 95       	com	r19
    2d16:	21 95       	neg	r18
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	0e c0       	rjmp	.+28     	; 0x2d3c <__fixsfsi+0x9c>
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	09 c0       	rjmp	.+18     	; 0x2d3c <__fixsfsi+0x9c>
    2d2a:	2f ef       	ldi	r18, 0xFF	; 255
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f ef       	ldi	r20, 0xFF	; 255
    2d30:	5f e7       	ldi	r21, 0x7F	; 127
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <__fixsfsi+0x9c>
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	50 e8       	ldi	r21, 0x80	; 128
    2d3c:	b9 01       	movw	r22, r18
    2d3e:	ca 01       	movw	r24, r20
    2d40:	2c 96       	adiw	r28, 0x0c	; 12
    2d42:	e2 e0       	ldi	r30, 0x02	; 2
    2d44:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x20>

00002d48 <__floatunsisf>:
    2d48:	a8 e0       	ldi	r26, 0x08	; 8
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ea ea       	ldi	r30, 0xAA	; 170
    2d4e:	f6 e1       	ldi	r31, 0x16	; 22
    2d50:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x10>
    2d54:	7b 01       	movw	r14, r22
    2d56:	8c 01       	movw	r16, r24
    2d58:	61 15       	cp	r22, r1
    2d5a:	71 05       	cpc	r23, r1
    2d5c:	81 05       	cpc	r24, r1
    2d5e:	91 05       	cpc	r25, r1
    2d60:	19 f4       	brne	.+6      	; 0x2d68 <__floatunsisf+0x20>
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	60 c0       	rjmp	.+192    	; 0x2e28 <__floatunsisf+0xe0>
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	8e e1       	ldi	r24, 0x1E	; 30
    2d6e:	c8 2e       	mov	r12, r24
    2d70:	d1 2c       	mov	r13, r1
    2d72:	dc 82       	std	Y+4, r13	; 0x04
    2d74:	cb 82       	std	Y+3, r12	; 0x03
    2d76:	ed 82       	std	Y+5, r14	; 0x05
    2d78:	fe 82       	std	Y+6, r15	; 0x06
    2d7a:	0f 83       	std	Y+7, r16	; 0x07
    2d7c:	18 87       	std	Y+8, r17	; 0x08
    2d7e:	c8 01       	movw	r24, r16
    2d80:	b7 01       	movw	r22, r14
    2d82:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__clzsi2>
    2d86:	fc 01       	movw	r30, r24
    2d88:	31 97       	sbiw	r30, 0x01	; 1
    2d8a:	f7 ff       	sbrs	r31, 7
    2d8c:	3b c0       	rjmp	.+118    	; 0x2e04 <__floatunsisf+0xbc>
    2d8e:	22 27       	eor	r18, r18
    2d90:	33 27       	eor	r19, r19
    2d92:	2e 1b       	sub	r18, r30
    2d94:	3f 0b       	sbc	r19, r31
    2d96:	57 01       	movw	r10, r14
    2d98:	68 01       	movw	r12, r16
    2d9a:	02 2e       	mov	r0, r18
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <__floatunsisf+0x5e>
    2d9e:	d6 94       	lsr	r13
    2da0:	c7 94       	ror	r12
    2da2:	b7 94       	ror	r11
    2da4:	a7 94       	ror	r10
    2da6:	0a 94       	dec	r0
    2da8:	d2 f7       	brpl	.-12     	; 0x2d9e <__floatunsisf+0x56>
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e0       	ldi	r26, 0x00	; 0
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <__floatunsisf+0x7c>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	aa 1f       	adc	r26, r26
    2dc2:	bb 1f       	adc	r27, r27
    2dc4:	2a 95       	dec	r18
    2dc6:	d2 f7       	brpl	.-12     	; 0x2dbc <__floatunsisf+0x74>
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	a1 09       	sbc	r26, r1
    2dcc:	b1 09       	sbc	r27, r1
    2dce:	8e 21       	and	r24, r14
    2dd0:	9f 21       	and	r25, r15
    2dd2:	a0 23       	and	r26, r16
    2dd4:	b1 23       	and	r27, r17
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	a1 05       	cpc	r26, r1
    2dda:	b1 05       	cpc	r27, r1
    2ddc:	21 f0       	breq	.+8      	; 0x2de6 <__floatunsisf+0x9e>
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	4a 29       	or	r20, r10
    2de8:	5b 29       	or	r21, r11
    2dea:	6c 29       	or	r22, r12
    2dec:	7d 29       	or	r23, r13
    2dee:	4d 83       	std	Y+5, r20	; 0x05
    2df0:	5e 83       	std	Y+6, r21	; 0x06
    2df2:	6f 83       	std	Y+7, r22	; 0x07
    2df4:	78 87       	std	Y+8, r23	; 0x08
    2df6:	8e e1       	ldi	r24, 0x1E	; 30
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	8e 1b       	sub	r24, r30
    2dfc:	9f 0b       	sbc	r25, r31
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	12 c0       	rjmp	.+36     	; 0x2e28 <__floatunsisf+0xe0>
    2e04:	30 97       	sbiw	r30, 0x00	; 0
    2e06:	81 f0       	breq	.+32     	; 0x2e28 <__floatunsisf+0xe0>
    2e08:	0e 2e       	mov	r0, r30
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <__floatunsisf+0xcc>
    2e0c:	ee 0c       	add	r14, r14
    2e0e:	ff 1c       	adc	r15, r15
    2e10:	00 1f       	adc	r16, r16
    2e12:	11 1f       	adc	r17, r17
    2e14:	0a 94       	dec	r0
    2e16:	d2 f7       	brpl	.-12     	; 0x2e0c <__floatunsisf+0xc4>
    2e18:	ed 82       	std	Y+5, r14	; 0x05
    2e1a:	fe 82       	std	Y+6, r15	; 0x06
    2e1c:	0f 83       	std	Y+7, r16	; 0x07
    2e1e:	18 87       	std	Y+8, r17	; 0x08
    2e20:	ce 1a       	sub	r12, r30
    2e22:	df 0a       	sbc	r13, r31
    2e24:	dc 82       	std	Y+4, r13	; 0x04
    2e26:	cb 82       	std	Y+3, r12	; 0x03
    2e28:	1a 82       	std	Y+2, r1	; 0x02
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__pack_f>
    2e32:	28 96       	adiw	r28, 0x08	; 8
    2e34:	ea e0       	ldi	r30, 0x0A	; 10
    2e36:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x10>

00002e3a <__clzsi2>:
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	7b 01       	movw	r14, r22
    2e44:	8c 01       	movw	r16, r24
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	e8 16       	cp	r14, r24
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	f8 06       	cpc	r15, r24
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	08 07       	cpc	r16, r24
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	18 07       	cpc	r17, r24
    2e56:	88 f4       	brcc	.+34     	; 0x2e7a <__clzsi2+0x40>
    2e58:	8f ef       	ldi	r24, 0xFF	; 255
    2e5a:	e8 16       	cp	r14, r24
    2e5c:	f1 04       	cpc	r15, r1
    2e5e:	01 05       	cpc	r16, r1
    2e60:	11 05       	cpc	r17, r1
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <__clzsi2+0x36>
    2e64:	28 f0       	brcs	.+10     	; 0x2e70 <__clzsi2+0x36>
    2e66:	88 e0       	ldi	r24, 0x08	; 8
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	17 c0       	rjmp	.+46     	; 0x2e9e <__clzsi2+0x64>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	a0 e0       	ldi	r26, 0x00	; 0
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	12 c0       	rjmp	.+36     	; 0x2e9e <__clzsi2+0x64>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	e8 16       	cp	r14, r24
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	f8 06       	cpc	r15, r24
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	08 07       	cpc	r16, r24
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	18 07       	cpc	r17, r24
    2e8a:	28 f0       	brcs	.+10     	; 0x2e96 <__clzsi2+0x5c>
    2e8c:	88 e1       	ldi	r24, 0x18	; 24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	04 c0       	rjmp	.+8      	; 0x2e9e <__clzsi2+0x64>
    2e96:	80 e1       	ldi	r24, 0x10	; 16
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a0 e0       	ldi	r26, 0x00	; 0
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	20 e2       	ldi	r18, 0x20	; 32
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	28 1b       	sub	r18, r24
    2ea8:	39 0b       	sbc	r19, r25
    2eaa:	4a 0b       	sbc	r20, r26
    2eac:	5b 0b       	sbc	r21, r27
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <__clzsi2+0x7e>
    2eb0:	16 95       	lsr	r17
    2eb2:	07 95       	ror	r16
    2eb4:	f7 94       	ror	r15
    2eb6:	e7 94       	ror	r14
    2eb8:	8a 95       	dec	r24
    2eba:	d2 f7       	brpl	.-12     	; 0x2eb0 <__clzsi2+0x76>
    2ebc:	f7 01       	movw	r30, r14
    2ebe:	e2 5e       	subi	r30, 0xE2	; 226
    2ec0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ec2:	80 81       	ld	r24, Z
    2ec4:	28 1b       	sub	r18, r24
    2ec6:	31 09       	sbc	r19, r1
    2ec8:	41 09       	sbc	r20, r1
    2eca:	51 09       	sbc	r21, r1
    2ecc:	c9 01       	movw	r24, r18
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	08 95       	ret

00002ed8 <__pack_f>:
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	e4 80       	ldd	r14, Z+4	; 0x04
    2ee6:	f5 80       	ldd	r15, Z+5	; 0x05
    2ee8:	06 81       	ldd	r16, Z+6	; 0x06
    2eea:	17 81       	ldd	r17, Z+7	; 0x07
    2eec:	d1 80       	ldd	r13, Z+1	; 0x01
    2eee:	80 81       	ld	r24, Z
    2ef0:	82 30       	cpi	r24, 0x02	; 2
    2ef2:	48 f4       	brcc	.+18     	; 0x2f06 <__pack_f+0x2e>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	a0 e1       	ldi	r26, 0x10	; 16
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e8 2a       	or	r14, r24
    2efe:	f9 2a       	or	r15, r25
    2f00:	0a 2b       	or	r16, r26
    2f02:	1b 2b       	or	r17, r27
    2f04:	a5 c0       	rjmp	.+330    	; 0x3050 <__pack_f+0x178>
    2f06:	84 30       	cpi	r24, 0x04	; 4
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <__pack_f+0x34>
    2f0a:	9f c0       	rjmp	.+318    	; 0x304a <__pack_f+0x172>
    2f0c:	82 30       	cpi	r24, 0x02	; 2
    2f0e:	21 f4       	brne	.+8      	; 0x2f18 <__pack_f+0x40>
    2f10:	ee 24       	eor	r14, r14
    2f12:	ff 24       	eor	r15, r15
    2f14:	87 01       	movw	r16, r14
    2f16:	05 c0       	rjmp	.+10     	; 0x2f22 <__pack_f+0x4a>
    2f18:	e1 14       	cp	r14, r1
    2f1a:	f1 04       	cpc	r15, r1
    2f1c:	01 05       	cpc	r16, r1
    2f1e:	11 05       	cpc	r17, r1
    2f20:	19 f4       	brne	.+6      	; 0x2f28 <__pack_f+0x50>
    2f22:	e0 e0       	ldi	r30, 0x00	; 0
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	96 c0       	rjmp	.+300    	; 0x3054 <__pack_f+0x17c>
    2f28:	62 81       	ldd	r22, Z+2	; 0x02
    2f2a:	73 81       	ldd	r23, Z+3	; 0x03
    2f2c:	9f ef       	ldi	r25, 0xFF	; 255
    2f2e:	62 38       	cpi	r22, 0x82	; 130
    2f30:	79 07       	cpc	r23, r25
    2f32:	0c f0       	brlt	.+2      	; 0x2f36 <__pack_f+0x5e>
    2f34:	5b c0       	rjmp	.+182    	; 0x2fec <__pack_f+0x114>
    2f36:	22 e8       	ldi	r18, 0x82	; 130
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	26 1b       	sub	r18, r22
    2f3c:	37 0b       	sbc	r19, r23
    2f3e:	2a 31       	cpi	r18, 0x1A	; 26
    2f40:	31 05       	cpc	r19, r1
    2f42:	2c f0       	brlt	.+10     	; 0x2f4e <__pack_f+0x76>
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	2a c0       	rjmp	.+84     	; 0x2fa2 <__pack_f+0xca>
    2f4e:	b8 01       	movw	r22, r16
    2f50:	a7 01       	movw	r20, r14
    2f52:	02 2e       	mov	r0, r18
    2f54:	04 c0       	rjmp	.+8      	; 0x2f5e <__pack_f+0x86>
    2f56:	76 95       	lsr	r23
    2f58:	67 95       	ror	r22
    2f5a:	57 95       	ror	r21
    2f5c:	47 95       	ror	r20
    2f5e:	0a 94       	dec	r0
    2f60:	d2 f7       	brpl	.-12     	; 0x2f56 <__pack_f+0x7e>
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e0       	ldi	r26, 0x00	; 0
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	04 c0       	rjmp	.+8      	; 0x2f74 <__pack_f+0x9c>
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	aa 1f       	adc	r26, r26
    2f72:	bb 1f       	adc	r27, r27
    2f74:	2a 95       	dec	r18
    2f76:	d2 f7       	brpl	.-12     	; 0x2f6c <__pack_f+0x94>
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	a1 09       	sbc	r26, r1
    2f7c:	b1 09       	sbc	r27, r1
    2f7e:	8e 21       	and	r24, r14
    2f80:	9f 21       	and	r25, r15
    2f82:	a0 23       	and	r26, r16
    2f84:	b1 23       	and	r27, r17
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	a1 05       	cpc	r26, r1
    2f8a:	b1 05       	cpc	r27, r1
    2f8c:	21 f0       	breq	.+8      	; 0x2f96 <__pack_f+0xbe>
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e0       	ldi	r26, 0x00	; 0
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	9a 01       	movw	r18, r20
    2f98:	ab 01       	movw	r20, r22
    2f9a:	28 2b       	or	r18, r24
    2f9c:	39 2b       	or	r19, r25
    2f9e:	4a 2b       	or	r20, r26
    2fa0:	5b 2b       	or	r21, r27
    2fa2:	da 01       	movw	r26, r20
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	8f 77       	andi	r24, 0x7F	; 127
    2fa8:	90 70       	andi	r25, 0x00	; 0
    2faa:	a0 70       	andi	r26, 0x00	; 0
    2fac:	b0 70       	andi	r27, 0x00	; 0
    2fae:	80 34       	cpi	r24, 0x40	; 64
    2fb0:	91 05       	cpc	r25, r1
    2fb2:	a1 05       	cpc	r26, r1
    2fb4:	b1 05       	cpc	r27, r1
    2fb6:	39 f4       	brne	.+14     	; 0x2fc6 <__pack_f+0xee>
    2fb8:	27 ff       	sbrs	r18, 7
    2fba:	09 c0       	rjmp	.+18     	; 0x2fce <__pack_f+0xf6>
    2fbc:	20 5c       	subi	r18, 0xC0	; 192
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	4f 4f       	sbci	r20, 0xFF	; 255
    2fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc4:	04 c0       	rjmp	.+8      	; 0x2fce <__pack_f+0xf6>
    2fc6:	21 5c       	subi	r18, 0xC1	; 193
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fca:	4f 4f       	sbci	r20, 0xFF	; 255
    2fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fce:	e0 e0       	ldi	r30, 0x00	; 0
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	20 30       	cpi	r18, 0x00	; 0
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	3a 07       	cpc	r19, r26
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	4a 07       	cpc	r20, r26
    2fdc:	a0 e4       	ldi	r26, 0x40	; 64
    2fde:	5a 07       	cpc	r21, r26
    2fe0:	10 f0       	brcs	.+4      	; 0x2fe6 <__pack_f+0x10e>
    2fe2:	e1 e0       	ldi	r30, 0x01	; 1
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	79 01       	movw	r14, r18
    2fe8:	8a 01       	movw	r16, r20
    2fea:	27 c0       	rjmp	.+78     	; 0x303a <__pack_f+0x162>
    2fec:	60 38       	cpi	r22, 0x80	; 128
    2fee:	71 05       	cpc	r23, r1
    2ff0:	64 f5       	brge	.+88     	; 0x304a <__pack_f+0x172>
    2ff2:	fb 01       	movw	r30, r22
    2ff4:	e1 58       	subi	r30, 0x81	; 129
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	d8 01       	movw	r26, r16
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	8f 77       	andi	r24, 0x7F	; 127
    2ffe:	90 70       	andi	r25, 0x00	; 0
    3000:	a0 70       	andi	r26, 0x00	; 0
    3002:	b0 70       	andi	r27, 0x00	; 0
    3004:	80 34       	cpi	r24, 0x40	; 64
    3006:	91 05       	cpc	r25, r1
    3008:	a1 05       	cpc	r26, r1
    300a:	b1 05       	cpc	r27, r1
    300c:	39 f4       	brne	.+14     	; 0x301c <__pack_f+0x144>
    300e:	e7 fe       	sbrs	r14, 7
    3010:	0d c0       	rjmp	.+26     	; 0x302c <__pack_f+0x154>
    3012:	80 e4       	ldi	r24, 0x40	; 64
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	a0 e0       	ldi	r26, 0x00	; 0
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <__pack_f+0x14c>
    301c:	8f e3       	ldi	r24, 0x3F	; 63
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 e0       	ldi	r26, 0x00	; 0
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e8 0e       	add	r14, r24
    3026:	f9 1e       	adc	r15, r25
    3028:	0a 1f       	adc	r16, r26
    302a:	1b 1f       	adc	r17, r27
    302c:	17 ff       	sbrs	r17, 7
    302e:	05 c0       	rjmp	.+10     	; 0x303a <__pack_f+0x162>
    3030:	16 95       	lsr	r17
    3032:	07 95       	ror	r16
    3034:	f7 94       	ror	r15
    3036:	e7 94       	ror	r14
    3038:	31 96       	adiw	r30, 0x01	; 1
    303a:	87 e0       	ldi	r24, 0x07	; 7
    303c:	16 95       	lsr	r17
    303e:	07 95       	ror	r16
    3040:	f7 94       	ror	r15
    3042:	e7 94       	ror	r14
    3044:	8a 95       	dec	r24
    3046:	d1 f7       	brne	.-12     	; 0x303c <__pack_f+0x164>
    3048:	05 c0       	rjmp	.+10     	; 0x3054 <__pack_f+0x17c>
    304a:	ee 24       	eor	r14, r14
    304c:	ff 24       	eor	r15, r15
    304e:	87 01       	movw	r16, r14
    3050:	ef ef       	ldi	r30, 0xFF	; 255
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	6e 2f       	mov	r22, r30
    3056:	67 95       	ror	r22
    3058:	66 27       	eor	r22, r22
    305a:	67 95       	ror	r22
    305c:	90 2f       	mov	r25, r16
    305e:	9f 77       	andi	r25, 0x7F	; 127
    3060:	d7 94       	ror	r13
    3062:	dd 24       	eor	r13, r13
    3064:	d7 94       	ror	r13
    3066:	8e 2f       	mov	r24, r30
    3068:	86 95       	lsr	r24
    306a:	49 2f       	mov	r20, r25
    306c:	46 2b       	or	r20, r22
    306e:	58 2f       	mov	r21, r24
    3070:	5d 29       	or	r21, r13
    3072:	b7 01       	movw	r22, r14
    3074:	ca 01       	movw	r24, r20
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	08 95       	ret

00003082 <__unpack_f>:
    3082:	fc 01       	movw	r30, r24
    3084:	db 01       	movw	r26, r22
    3086:	40 81       	ld	r20, Z
    3088:	51 81       	ldd	r21, Z+1	; 0x01
    308a:	22 81       	ldd	r18, Z+2	; 0x02
    308c:	62 2f       	mov	r22, r18
    308e:	6f 77       	andi	r22, 0x7F	; 127
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	22 1f       	adc	r18, r18
    3094:	22 27       	eor	r18, r18
    3096:	22 1f       	adc	r18, r18
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	89 2f       	mov	r24, r25
    309c:	88 0f       	add	r24, r24
    309e:	82 2b       	or	r24, r18
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	99 1f       	adc	r25, r25
    30a6:	99 27       	eor	r25, r25
    30a8:	99 1f       	adc	r25, r25
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 93       	st	X, r25
    30ae:	11 97       	sbiw	r26, 0x01	; 1
    30b0:	21 15       	cp	r18, r1
    30b2:	31 05       	cpc	r19, r1
    30b4:	a9 f5       	brne	.+106    	; 0x3120 <__unpack_f+0x9e>
    30b6:	41 15       	cp	r20, r1
    30b8:	51 05       	cpc	r21, r1
    30ba:	61 05       	cpc	r22, r1
    30bc:	71 05       	cpc	r23, r1
    30be:	11 f4       	brne	.+4      	; 0x30c4 <__unpack_f+0x42>
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	37 c0       	rjmp	.+110    	; 0x3132 <__unpack_f+0xb0>
    30c4:	82 e8       	ldi	r24, 0x82	; 130
    30c6:	9f ef       	ldi	r25, 0xFF	; 255
    30c8:	13 96       	adiw	r26, 0x03	; 3
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24
    30ce:	12 97       	sbiw	r26, 0x02	; 2
    30d0:	9a 01       	movw	r18, r20
    30d2:	ab 01       	movw	r20, r22
    30d4:	67 e0       	ldi	r22, 0x07	; 7
    30d6:	22 0f       	add	r18, r18
    30d8:	33 1f       	adc	r19, r19
    30da:	44 1f       	adc	r20, r20
    30dc:	55 1f       	adc	r21, r21
    30de:	6a 95       	dec	r22
    30e0:	d1 f7       	brne	.-12     	; 0x30d6 <__unpack_f+0x54>
    30e2:	83 e0       	ldi	r24, 0x03	; 3
    30e4:	8c 93       	st	X, r24
    30e6:	0d c0       	rjmp	.+26     	; 0x3102 <__unpack_f+0x80>
    30e8:	22 0f       	add	r18, r18
    30ea:	33 1f       	adc	r19, r19
    30ec:	44 1f       	adc	r20, r20
    30ee:	55 1f       	adc	r21, r21
    30f0:	12 96       	adiw	r26, 0x02	; 2
    30f2:	8d 91       	ld	r24, X+
    30f4:	9c 91       	ld	r25, X
    30f6:	13 97       	sbiw	r26, 0x03	; 3
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	13 96       	adiw	r26, 0x03	; 3
    30fc:	9c 93       	st	X, r25
    30fe:	8e 93       	st	-X, r24
    3100:	12 97       	sbiw	r26, 0x02	; 2
    3102:	20 30       	cpi	r18, 0x00	; 0
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	38 07       	cpc	r19, r24
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	48 07       	cpc	r20, r24
    310c:	80 e4       	ldi	r24, 0x40	; 64
    310e:	58 07       	cpc	r21, r24
    3110:	58 f3       	brcs	.-42     	; 0x30e8 <__unpack_f+0x66>
    3112:	14 96       	adiw	r26, 0x04	; 4
    3114:	2d 93       	st	X+, r18
    3116:	3d 93       	st	X+, r19
    3118:	4d 93       	st	X+, r20
    311a:	5c 93       	st	X, r21
    311c:	17 97       	sbiw	r26, 0x07	; 7
    311e:	08 95       	ret
    3120:	2f 3f       	cpi	r18, 0xFF	; 255
    3122:	31 05       	cpc	r19, r1
    3124:	79 f4       	brne	.+30     	; 0x3144 <__unpack_f+0xc2>
    3126:	41 15       	cp	r20, r1
    3128:	51 05       	cpc	r21, r1
    312a:	61 05       	cpc	r22, r1
    312c:	71 05       	cpc	r23, r1
    312e:	19 f4       	brne	.+6      	; 0x3136 <__unpack_f+0xb4>
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	8c 93       	st	X, r24
    3134:	08 95       	ret
    3136:	64 ff       	sbrs	r22, 4
    3138:	03 c0       	rjmp	.+6      	; 0x3140 <__unpack_f+0xbe>
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	8c 93       	st	X, r24
    313e:	12 c0       	rjmp	.+36     	; 0x3164 <__unpack_f+0xe2>
    3140:	1c 92       	st	X, r1
    3142:	10 c0       	rjmp	.+32     	; 0x3164 <__unpack_f+0xe2>
    3144:	2f 57       	subi	r18, 0x7F	; 127
    3146:	30 40       	sbci	r19, 0x00	; 0
    3148:	13 96       	adiw	r26, 0x03	; 3
    314a:	3c 93       	st	X, r19
    314c:	2e 93       	st	-X, r18
    314e:	12 97       	sbiw	r26, 0x02	; 2
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	8c 93       	st	X, r24
    3154:	87 e0       	ldi	r24, 0x07	; 7
    3156:	44 0f       	add	r20, r20
    3158:	55 1f       	adc	r21, r21
    315a:	66 1f       	adc	r22, r22
    315c:	77 1f       	adc	r23, r23
    315e:	8a 95       	dec	r24
    3160:	d1 f7       	brne	.-12     	; 0x3156 <__unpack_f+0xd4>
    3162:	70 64       	ori	r23, 0x40	; 64
    3164:	14 96       	adiw	r26, 0x04	; 4
    3166:	4d 93       	st	X+, r20
    3168:	5d 93       	st	X+, r21
    316a:	6d 93       	st	X+, r22
    316c:	7c 93       	st	X, r23
    316e:	17 97       	sbiw	r26, 0x07	; 7
    3170:	08 95       	ret

00003172 <__fpcmp_parts_f>:
    3172:	1f 93       	push	r17
    3174:	dc 01       	movw	r26, r24
    3176:	fb 01       	movw	r30, r22
    3178:	9c 91       	ld	r25, X
    317a:	92 30       	cpi	r25, 0x02	; 2
    317c:	08 f4       	brcc	.+2      	; 0x3180 <__fpcmp_parts_f+0xe>
    317e:	47 c0       	rjmp	.+142    	; 0x320e <__fpcmp_parts_f+0x9c>
    3180:	80 81       	ld	r24, Z
    3182:	82 30       	cpi	r24, 0x02	; 2
    3184:	08 f4       	brcc	.+2      	; 0x3188 <__fpcmp_parts_f+0x16>
    3186:	43 c0       	rjmp	.+134    	; 0x320e <__fpcmp_parts_f+0x9c>
    3188:	94 30       	cpi	r25, 0x04	; 4
    318a:	51 f4       	brne	.+20     	; 0x31a0 <__fpcmp_parts_f+0x2e>
    318c:	11 96       	adiw	r26, 0x01	; 1
    318e:	1c 91       	ld	r17, X
    3190:	84 30       	cpi	r24, 0x04	; 4
    3192:	99 f5       	brne	.+102    	; 0x31fa <__fpcmp_parts_f+0x88>
    3194:	81 81       	ldd	r24, Z+1	; 0x01
    3196:	68 2f       	mov	r22, r24
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	61 1b       	sub	r22, r17
    319c:	71 09       	sbc	r23, r1
    319e:	3f c0       	rjmp	.+126    	; 0x321e <__fpcmp_parts_f+0xac>
    31a0:	84 30       	cpi	r24, 0x04	; 4
    31a2:	21 f0       	breq	.+8      	; 0x31ac <__fpcmp_parts_f+0x3a>
    31a4:	92 30       	cpi	r25, 0x02	; 2
    31a6:	31 f4       	brne	.+12     	; 0x31b4 <__fpcmp_parts_f+0x42>
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	b9 f1       	breq	.+110    	; 0x321a <__fpcmp_parts_f+0xa8>
    31ac:	81 81       	ldd	r24, Z+1	; 0x01
    31ae:	88 23       	and	r24, r24
    31b0:	89 f1       	breq	.+98     	; 0x3214 <__fpcmp_parts_f+0xa2>
    31b2:	2d c0       	rjmp	.+90     	; 0x320e <__fpcmp_parts_f+0x9c>
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	1c 91       	ld	r17, X
    31b8:	11 97       	sbiw	r26, 0x01	; 1
    31ba:	82 30       	cpi	r24, 0x02	; 2
    31bc:	f1 f0       	breq	.+60     	; 0x31fa <__fpcmp_parts_f+0x88>
    31be:	81 81       	ldd	r24, Z+1	; 0x01
    31c0:	18 17       	cp	r17, r24
    31c2:	d9 f4       	brne	.+54     	; 0x31fa <__fpcmp_parts_f+0x88>
    31c4:	12 96       	adiw	r26, 0x02	; 2
    31c6:	2d 91       	ld	r18, X+
    31c8:	3c 91       	ld	r19, X
    31ca:	13 97       	sbiw	r26, 0x03	; 3
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	82 17       	cp	r24, r18
    31d2:	93 07       	cpc	r25, r19
    31d4:	94 f0       	brlt	.+36     	; 0x31fa <__fpcmp_parts_f+0x88>
    31d6:	28 17       	cp	r18, r24
    31d8:	39 07       	cpc	r19, r25
    31da:	bc f0       	brlt	.+46     	; 0x320a <__fpcmp_parts_f+0x98>
    31dc:	14 96       	adiw	r26, 0x04	; 4
    31de:	8d 91       	ld	r24, X+
    31e0:	9d 91       	ld	r25, X+
    31e2:	0d 90       	ld	r0, X+
    31e4:	bc 91       	ld	r27, X
    31e6:	a0 2d       	mov	r26, r0
    31e8:	24 81       	ldd	r18, Z+4	; 0x04
    31ea:	35 81       	ldd	r19, Z+5	; 0x05
    31ec:	46 81       	ldd	r20, Z+6	; 0x06
    31ee:	57 81       	ldd	r21, Z+7	; 0x07
    31f0:	28 17       	cp	r18, r24
    31f2:	39 07       	cpc	r19, r25
    31f4:	4a 07       	cpc	r20, r26
    31f6:	5b 07       	cpc	r21, r27
    31f8:	18 f4       	brcc	.+6      	; 0x3200 <__fpcmp_parts_f+0x8e>
    31fa:	11 23       	and	r17, r17
    31fc:	41 f0       	breq	.+16     	; 0x320e <__fpcmp_parts_f+0x9c>
    31fe:	0a c0       	rjmp	.+20     	; 0x3214 <__fpcmp_parts_f+0xa2>
    3200:	82 17       	cp	r24, r18
    3202:	93 07       	cpc	r25, r19
    3204:	a4 07       	cpc	r26, r20
    3206:	b5 07       	cpc	r27, r21
    3208:	40 f4       	brcc	.+16     	; 0x321a <__fpcmp_parts_f+0xa8>
    320a:	11 23       	and	r17, r17
    320c:	19 f0       	breq	.+6      	; 0x3214 <__fpcmp_parts_f+0xa2>
    320e:	61 e0       	ldi	r22, 0x01	; 1
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	05 c0       	rjmp	.+10     	; 0x321e <__fpcmp_parts_f+0xac>
    3214:	6f ef       	ldi	r22, 0xFF	; 255
    3216:	7f ef       	ldi	r23, 0xFF	; 255
    3218:	02 c0       	rjmp	.+4      	; 0x321e <__fpcmp_parts_f+0xac>
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	cb 01       	movw	r24, r22
    3220:	1f 91       	pop	r17
    3222:	08 95       	ret

00003224 <itoa>:
    3224:	fb 01       	movw	r30, r22
    3226:	9f 01       	movw	r18, r30
    3228:	e8 94       	clt
    322a:	42 30       	cpi	r20, 0x02	; 2
    322c:	c4 f0       	brlt	.+48     	; 0x325e <itoa+0x3a>
    322e:	45 32       	cpi	r20, 0x25	; 37
    3230:	b4 f4       	brge	.+44     	; 0x325e <itoa+0x3a>
    3232:	4a 30       	cpi	r20, 0x0A	; 10
    3234:	29 f4       	brne	.+10     	; 0x3240 <itoa+0x1c>
    3236:	97 fb       	bst	r25, 7
    3238:	1e f4       	brtc	.+6      	; 0x3240 <itoa+0x1c>
    323a:	90 95       	com	r25
    323c:	81 95       	neg	r24
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	64 2f       	mov	r22, r20
    3242:	77 27       	eor	r23, r23
    3244:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    3248:	80 5d       	subi	r24, 0xD0	; 208
    324a:	8a 33       	cpi	r24, 0x3A	; 58
    324c:	0c f0       	brlt	.+2      	; 0x3250 <itoa+0x2c>
    324e:	89 5d       	subi	r24, 0xD9	; 217
    3250:	81 93       	st	Z+, r24
    3252:	cb 01       	movw	r24, r22
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	a1 f7       	brne	.-24     	; 0x3240 <itoa+0x1c>
    3258:	16 f4       	brtc	.+4      	; 0x325e <itoa+0x3a>
    325a:	5d e2       	ldi	r21, 0x2D	; 45
    325c:	51 93       	st	Z+, r21
    325e:	10 82       	st	Z, r1
    3260:	c9 01       	movw	r24, r18
    3262:	0c 94 33 19 	jmp	0x3266	; 0x3266 <strrev>

00003266 <strrev>:
    3266:	dc 01       	movw	r26, r24
    3268:	fc 01       	movw	r30, r24
    326a:	67 2f       	mov	r22, r23
    326c:	71 91       	ld	r23, Z+
    326e:	77 23       	and	r23, r23
    3270:	e1 f7       	brne	.-8      	; 0x326a <strrev+0x4>
    3272:	32 97       	sbiw	r30, 0x02	; 2
    3274:	04 c0       	rjmp	.+8      	; 0x327e <strrev+0x18>
    3276:	7c 91       	ld	r23, X
    3278:	6d 93       	st	X+, r22
    327a:	70 83       	st	Z, r23
    327c:	62 91       	ld	r22, -Z
    327e:	ae 17       	cp	r26, r30
    3280:	bf 07       	cpc	r27, r31
    3282:	c8 f3       	brcs	.-14     	; 0x3276 <strrev+0x10>
    3284:	08 95       	ret

00003286 <__udivmodhi4>:
    3286:	aa 1b       	sub	r26, r26
    3288:	bb 1b       	sub	r27, r27
    328a:	51 e1       	ldi	r21, 0x11	; 17
    328c:	07 c0       	rjmp	.+14     	; 0x329c <__udivmodhi4_ep>

0000328e <__udivmodhi4_loop>:
    328e:	aa 1f       	adc	r26, r26
    3290:	bb 1f       	adc	r27, r27
    3292:	a6 17       	cp	r26, r22
    3294:	b7 07       	cpc	r27, r23
    3296:	10 f0       	brcs	.+4      	; 0x329c <__udivmodhi4_ep>
    3298:	a6 1b       	sub	r26, r22
    329a:	b7 0b       	sbc	r27, r23

0000329c <__udivmodhi4_ep>:
    329c:	88 1f       	adc	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	5a 95       	dec	r21
    32a2:	a9 f7       	brne	.-22     	; 0x328e <__udivmodhi4_loop>
    32a4:	80 95       	com	r24
    32a6:	90 95       	com	r25
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	08 95       	ret

000032ae <__prologue_saves__>:
    32ae:	2f 92       	push	r2
    32b0:	3f 92       	push	r3
    32b2:	4f 92       	push	r4
    32b4:	5f 92       	push	r5
    32b6:	6f 92       	push	r6
    32b8:	7f 92       	push	r7
    32ba:	8f 92       	push	r8
    32bc:	9f 92       	push	r9
    32be:	af 92       	push	r10
    32c0:	bf 92       	push	r11
    32c2:	cf 92       	push	r12
    32c4:	df 92       	push	r13
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	ca 1b       	sub	r28, r26
    32d8:	db 0b       	sbc	r29, r27
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
    32e4:	19 94       	eijmp

000032e6 <__epilogue_restores__>:
    32e6:	2a 88       	ldd	r2, Y+18	; 0x12
    32e8:	39 88       	ldd	r3, Y+17	; 0x11
    32ea:	48 88       	ldd	r4, Y+16	; 0x10
    32ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    32f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32f8:	b9 84       	ldd	r11, Y+9	; 0x09
    32fa:	c8 84       	ldd	r12, Y+8	; 0x08
    32fc:	df 80       	ldd	r13, Y+7	; 0x07
    32fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3300:	fd 80       	ldd	r15, Y+5	; 0x05
    3302:	0c 81       	ldd	r16, Y+4	; 0x04
    3304:	1b 81       	ldd	r17, Y+3	; 0x03
    3306:	aa 81       	ldd	r26, Y+2	; 0x02
    3308:	b9 81       	ldd	r27, Y+1	; 0x01
    330a:	ce 0f       	add	r28, r30
    330c:	d1 1d       	adc	r29, r1
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	ed 01       	movw	r28, r26
    331a:	08 95       	ret

0000331c <_exit>:
    331c:	f8 94       	cli

0000331e <__stop_program>:
    331e:	ff cf       	rjmp	.-2      	; 0x331e <__stop_program>
